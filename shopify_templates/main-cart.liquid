{%- style -%}
  #shopify-section-{{ section.id }} {
    --section-padding-top: {{ section.settings.padding_top }}px;
    --section-padding-bottom: {{ section.settings.padding_bottom }}px;
  }
{%- endstyle -%}
{{ 'cart.css' | asset_url | stylesheet_tag }}
{{ 'component-custom-card.css' | asset_url | stylesheet_tag }}
<script src="{{ 'cart.js' | asset_url }}" defer="defer"></script>

{%- if linklists['gift-wrapping'].links != blank and linklists['gift-wrapping'].links.first.type == 'product_link' -%}
  <script src="{{ 'gift-wrapping.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

<div class="cart section--padding{% if cart == empty %} is-empty{% endif %}">
  <div class="page-width">
    <div class="cart__header">
      <h1 class="cart__title h1">
        <motion-element data-motion="fade-up" class="inline-flex gap-2">
          {{- 'sections.cart.title' | t }}
        </motion-element>
      </h1>
    </div>
    <div class="cart__empty text-center flex flex-col gap-10">
      <div class="grid gap-5 cart__empty-header">
        <h2 class="h1">{{ 'sections.cart.empty' | t }}</h2>
        {%- if settings.cart_empty_message != blank -%}
          <div class="rte text-subtext">{{ settings.cart_empty_message }}</div>
        {%- endif -%}
      </div>
      {%- if settings.collection_list != blank -%}
        <div class="swipe-mobile">
          <div class="f-grid recommendation-collection swipe-mobile__inner">
            {%- for collection in settings.collection_list -%}
              {%- liquid
                assign collection_image = collection.featured_image
                assign first_product_in_collection = collection.products[0]

                if collection_image == blank
                  assign collection_image = first_product_in_collection.featured_image
                endif

                assign image_ratio = settings.collection_image_ratio
                if image_ratio == 'adapt'
                  assign image_ratio = collection_image.aspect_ratio
                endif
              -%}
              <div class="f-column">
                <div class="">
                  <a href="{{ collection.url }}" class="flex flex-col gap-4 hover-wrapper btn-hover-wrapper">
                    <div
                      class="custom-card__media media-wrapper blocks-radius-sm"
                      style="--aspect-ratio: {{ image_ratio }};"
                    >
                      {%- if collection_image != blank -%}
                        {{
                          collection_image
                          | image_url: width: 1100
                          | image_tag:
                            loading: 'lazy',
                            class: 'motion-reduce hover-scale-up',
                            widths: '165, 360, 535, 750, 940, 1100',
                            is: 'image-lazy'
                        }}
                      {%- else -%}
                        <div style="--aspect-ratio: 1;">
                          {{ 'product-1' | placeholder_svg_tag: 'placeholder-svg hover-scale-up' }}
                        </div>
                      {%- endif -%}
                    </div>
                    <div class="md:flex items-center gap-2 z-1">
                      <h3 class="h5 flex flex-grow">{{ collection.title }}</h3>
                      <button
                        class="btn btn--icon-circle btn--icon hidden lg:flex"
                        aria-label="{{ collection.title }}"
                      >
                        <span class="btn__text flex">
                          {%- render 'icon-caret-right', size: 'extra-small' -%}
                        </span>
                      </button>
                    </div>
                  </a>
                </div>
              </div>
            {%- endfor -%}
          </div>
        </div>
      {%- endif -%}
      <a class="btn btn--primary self-center cart__empty-header" href="{{ routes.all_products_collection_url }}">
        <span class="btn__text">{{- 'general.cart.continue_shopping' | t -}}</span>
      </a>
    </div>
    {% comment %} {%- if cart.item_count > 0 -%} {% endcomment %}
    {%- liquid
      if linklists['gift-wrapping'].links != blank and linklists['gift-wrapping'].links.first.type == 'product_link'
        assign gift_wrapping = linklists['gift-wrapping'].links.first
        assign gift_wrap_id = gift_wrapping.object.variants.first.id
        assign gift_wraps_in_cart = 0
        for item in cart.items
          if item.id == gift_wrap_id
            assign gift_wraps_in_cart = item.quantity
            break
          endif
        endfor
        assign items_in_cart = cart.item_count | minus: gift_wraps_in_cart
      endif
    -%}
    <main-cart
      id="MainCart-{{ section.id }}"
      class="block md:flex items-stretch"
    >
      <form
        class="cart__form{% unless cart.item_count > 0 %} hidden{% endunless %}"
        action="{{ routes.cart_url }}"
        method="POST"
        id="cart"
      >
        <cart-items class="block sticky-element">
          <table role="table" class="w-full">
            <caption class="visually-hidden">
              {{ 'general.cart.title' | t }}
            </caption>
            <thead>
              <tr class="text-left hidden">
                <th class="h6" colspan="1" scope="col">{{ 'sections.cart.headings.product' | t }}</th>
                <th class="h6" colspan="1" scope="col" class="hidden lg:table-cell">
                  {{ 'sections.cart.headings.quantity' | t }}
                </th>
                <th class="h6" colspan="1" scope="col" class="hidden lg:table-cell">
                  {{ 'sections.cart.headings.total' | t }}
                </th>
              </tr>
            </thead>
            <tbody>
              {%- for item in cart.items -%}
                {%- liquid
                  assign is_gift_wrap_item = false
                  if gift_wrap_id != null and item.id == gift_wrap_id
                    assign is_gift_wrap_item = true
                  endif

                  assign has_qty_rules = false
                  if item.variant.quantity_rule.increment > 1 or item.variant.quantity_rule.min > 1 or item.variant.quantity_rule.max != null
                    assign has_qty_rules = true
                  endif

                  assign has_vol_pricing = false
                  if item.variant.quantity_price_breaks.size > 0
                    assign has_vol_pricing = true
                  endif
                -%}

                {%- if has_qty_rules or has_vol_pricing -%}
                  {%- capture qty_rules_vol_pricing -%}
                      {%- if has_qty_rules -%}
                        <div
                          class="quantity__rules text-sm"
                        >
                          {%- if item.variant.quantity_rule.increment > 1 -%}
                            <span class="divider">
                              {{-
                                'products.product.quantity.multiples_of'
                                | t: quantity: item.variant.quantity_rule.increment
                              -}}
                            </span>
                          {%- endif -%}
                          {%- if item.variant.quantity_rule.min > 1 -%}
                            <span class="divider">
                              {{-
                                'products.product.quantity.minimum_of'
                                | t: quantity: item.variant.quantity_rule.min
                              -}}
                            </span>
                          {%- endif -%}
                          {%- if item.variant.quantity_rule.max != null -%}
                            <span class="divider font-body-bold">
                              {{-
                                'products.product.quantity.maximum_of'
                                | t: quantity: item.variant.quantity_rule.max
                              -}}
                            </span>
                          {%- endif -%}
                        </div>
                      {%- endif -%}
                      {%- if has_vol_pricing -%}
                        {{ 'component-volume-pricing.css' | asset_url | stylesheet_tag }}
                        <volume-pricing class="block parent-display blocks-radius-md" id="Volume-{{ section.id }}">
                          <span class="caption block">{{ 'products.product.volume_pricing.title' | t }}</span>
                          <ul class="list-unstyled">
                            <li class="blocks-radius-md">
                              <span>{{ item.variant.quantity_rule.min }}+</span>
                              {%- liquid 
                                if settings.currency_code_enabled
                                  assign price = item.variant.price | money_with_currency
                                else
                                  assign price = item.variant.price | money
                                endif
                              -%}
                              <span> {{ 'sections.quick_order_list.each' | t: money: price }}</span>
                            </li>
                            {%- for price_break in item.variant.quantity_price_breaks -%}
                              <li class="blocks-radius-md">
                                <span>
                                  {{- price_break.minimum_quantity -}}
                                  <span aria-hidden="true">+</span>
                                </span>
                                {%- liquid 
                                  if settings.currency_code_enabled
                                    assign price_break_price = price_break.price | money_with_currency
                                  else
                                    assign price_break_price = price_break.price | money
                                  endif
                                -%}
                                <span>{{ 'sections.quick_order_list.each' | t: money: price_break_price }}</span>
                              </li>
                            {%- endfor -%}
                          </ul>
                        </volume-pricing>
                      {%- endif -%}
                    {%- endcapture -%}
                {%- endif -%}

                {%- capture cart_item -%}
                    <tr class="cart-item" id="CartItem-{{ item.index | plus: 1 }}">
                      <td class="cart-item__product">
                        <div class="flex items-start md:items-center gap-3 md:gap-6">
                          <a id="Loader-{{ section.id }}-{{ item.index | plus: 1 }}"{% unless is_gift_wrap_item %} is="cart-remove-item"{% else %} is="gift-wrap-remove-item"{% endunless %} class="items-center justify-center relative hidden md:flex btn-remove" href="{{ item.url_to_remove }}" data-index="{{ item.index | plus: 1 }}">
                            <span class="visually-hidden">{{ 'general.cart.remove' | t }}</span>
                            {% render 'icon-close', size: 'small' %}
                            {% render 'loading-spinner' %}
                          </a>
                          {%- if item.image -%}
                            <a class="cart-item__media blocks-radius-sm media-wrapper" href="{{ item.url }}" tabindex="-1" aria-label="{{ item.title | escape }}">
                              {{- item.image | image_url: width: item.image.width | image_tag: loading: 'lazy', widths: '180,360,540', is: 'image-lazy' -}}
                            </a>
                          {%- else -%}
                            <a class="cart-item__media blocks-radius-sm media-wrapper" href="{{ item.url }}" tabindex="-1" aria-label="{{ item.title | escape }}">
                              <img 
                                src="https://cdn.shopify.com/s/files/1/0908/2804/6670/files/square-bildkommer_41fdbdd7-eb36-462b-b879-5ae871f39315.jpg?v=1754924924" 
                                alt="Default product image"
                                width="180"
                                height="180"
                                class="w-full h-auto"
                                loading="lazy"
                              >
                            </a>
                          {%- endif -%}
                          <div class="cart-item__product--info flex flex-col items-start gap-3 flex-grow">
                            <div class="flex justify-between w-full md:grid gap-3">
                              <div class="grid gap-1 w-full">
                                <div class="flex items-center justify-between gap-1 flex-wrap">
                                  <div class="block">
                                    <a href="{{ item.url }}" class="cart-item__title text-pcard-title reversed-link">{{- item.product.title | escape -}}</a>
                                  </div>
                                </div>
                                {%- if item.product.has_only_default_variant == false or item.properties.size != 0 or item.selling_plan_allocation != null -%}
                                  <div class="cart-item__options">
                                    {%- if item.product.has_only_default_variant == false -%}
                                      {%- assign last_index = item.options_with_values.size | minus: 1 -%}
                                      {%- for option in item.options_with_values -%}
                                        <span class="cart-item__option-value text-sm text-subtext">
                                          {{ option.value }}{% unless forloop.index0 == last_index %}, {% endunless %}
                                        </span>
                                      {%- endfor -%}
                                    {%- endif -%}
                                    {%- for property in item.properties -%}
                                      {%- assign property_first_char = property.first | slice: 0 -%}
                                      {%- if property.last != blank and property_first_char != '_' -%}
                                        <div class="flex gap-1 text-sm text-subtext">
                                          <dt>{{ property.first }}:&nbsp;</dt>
                                          <dd>
                                            {%- if property.last contains '/uploads/' -%}
                                              <a href="{{ property.last }}" class="link" target="_blank" aria-describedby="a11y-new-window-message">
                                                {{- property.last | split: '/' | last -}}
                                              </a>
                                            {%- else -%}
                                              {{- property.last -}}
                                            {%- endif -%}
                                          </dd>
                                        </div>
                                      {%- endif -%}
                                    {%- endfor -%}
                                    {%- if item.selling_plan_allocation != null -%}
                                      <p class="text-sm text-subtext">{{ item.selling_plan_allocation.selling_plan.name }}</p>
                                    {%- endif -%}
                                  </div>
                                {%- endif -%}
                              </div>
                              <div class="grid gap-2 hidden lg:grid">
                                {%- if item.line_level_discount_allocations != blank -%}
                                  <ul class="cart-item__discounts discounts list-unstyled flex gap-1" role="list" aria-label="{{ 'customer.order.discount' | t }}">
                                    {%- for discount_allocation in item.line_level_discount_allocations -%}
                                      <li class="discount text-sm-extra font-body-bold flex items-center gap-2">
                                        {% render 'icon-discount' %}
                                        <span>{{ discount_allocation.discount_application.title }}</span>
                                      </li>
                                    {%- endfor -%}
                                  </ul>
                                {%- endif -%}
                                <div class="cart-item__prices">
                                  <div class="price text-right flex flex-wrap items-center gap-x-2 font-body-bolder{% if item.original_price != item.final_price %} price--on-sale{% endif %}">
                                    {%- liquid
                                      assign money_price = item.original_price | money
                                      if settings.currency_code_enabled
                                        assign money_price = item.original_price | money_with_currency
                                      endif
                                    -%}
                                    {%- if item.original_price != item.final_price -%}
                                      <span class="visually-hidden">{{ 'products.product.price.regular_price' | t }}</span>
                                      <span class="visually-hidden">{{ 'products.product.price.sale_price' | t }}</span>
                                      <span class="price__regular">
                                        {%- liquid 
                                          if settings.currency_code_enabled
                                            echo item.final_price | money_with_currency
                                          else
                                            echo item.final_price | money
                                          endif  
                                        -%}
                                      </span>
                                      <s class="price__sale font-body text-subtext">{{ money_price }}</s>
                                    {%- else -%}
                                      {{- money_price -}}
                                    {%- endif -%}
          
                                    {%- if item.variant.available and item.unit_price_measurement -%}
                                      <span class="visually-hidden">{{ 'products.product.price.unit_price' | t }}</span>
                                      <span class="unit-price flex items-center font-body text-sm text-subtext">
                                        {%- liquid
                                          capture unit_price_base_unit
                                            if item.variant.unit_price_measurement
                                              if item.variant.unit_price_measurement.reference_value != 1
                                                echo item.variant.unit_price_measurement.reference_value
                                              endif
                                              echo item.variant.unit_price_measurement.reference_unit
                                            endif
                                          endcapture
                                        -%}
                                        ({{ item.variant.unit_price | money }}
                                        <span aria-hidden="true">/</span>
                                        <span class="visually-hidden">&nbsp;{{ 'accessibility.unit_price_separator' | t }}&nbsp;</span>
                                        {{ unit_price_base_unit }})
                                        </span>
                                    {%- endif -%}
                                  </div>
                                </div>
                              </div>
                              <a id="Loader-{{ section.id }}-{{ item.index | plus: 1 }}"{% unless is_gift_wrap_item %} is="cart-remove-item"{% else %} is="gift-wrap-remove-item"{% endunless %} class="items-center justify-center relative md:hidden btn-remove" href="{{ item.url_to_remove }}" data-index="{{ item.index | plus: 1 }}">
                                <span class="visually-hidden">{{ 'general.cart.remove' | t }}</span>
                                {% render 'icon-close', size: 'small' %}
                                {% render 'loading-spinner' %}
                              </a>
                            </div>
                            
                            <template>
                              <div class="cart-item__action flex items-end justify-between gap-3 lg:hidden w-full">
                                <div class="flex items-center gap-2">
                                  {%- unless is_gift_wrap_item -%}
                                    {%- assign is_decimal_unit = false -%}
                                    {%- assign quantity_unit = 'items' -%}
                                    {%- if item.variant.metafields.custom.standard_unit and item.variant.metafields.custom.standard_unit.value -%}
                                      {%- assign unit = item.variant.metafields.custom.standard_unit.value -%}
                                      
                                      {%- comment -%}
                                      Use same logic as cart drawer: whitelist approach for whole number units
                                      Units that require whole numbers: "st", "rle", "pkt", "pås", "Sk", "krt", "frp"
                                      All other units (including "pal") are decimal units
                                      {%- endcomment -%}
                                      {%- assign whole_number_units = 'st,rle,pkt,pås,Sk,krt,frp' | split: ',' -%}
                                      {%- assign is_decimal_unit = true -%}
                                      {%- assign quantity_unit = unit -%}
                                      
                                      {%- for whole_unit in whole_number_units -%}
                                        {%- if unit == whole_unit -%}
                                          {%- assign is_decimal_unit = false -%}
                                          {%- break -%}
                                        {%- endif -%}
                                      {%- endfor -%}
                                    {%- endif -%}
                                    
                                    <quantity-input class="cart-quantity quantity" data-is-decimal="{{ is_decimal_unit }}">
                                      <label class="visually-hidden" for="Quantity-{{ section.id }}-{{ item.index | plus: 1 }}">{{ 'products.product.quantity.label' | t }}</label>
                                      <button type="button" name="minus" class="quantity__button" aria-label="{{ 'products.product.quantity.decrease' | t: product: item.product.title | escape }}">
                                        <svg width="16" height="16" viewBox="0 0 15 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                                          <path d="M2.6875 7H12.3125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                        </svg>
                                      </button>
                                      <input class="quantity__input"
                                        {% if is_decimal_unit %}type="text"{% else %}type="number"{% endif %}
                                        {% if is_decimal_unit %}
                                          name="quantity_decimal_{{ item.variant.id }}"
                                          data-cart-updates-name="updates[]"
                                          data-cart-updates-index="{{ item.index }}"
                                          value="{{ item.quantity | divided_by: 20.0 | round: 2 | replace: '.', ',' }}"
                                        {% else %}
                                          name="updates[]"
                                          value="{{ item.quantity }}"
                                        {% endif %}
                                        aria-label="{{ 'products.product.quantity.input_label' | t: product: item.product.title | escape }}"
                                        id="Quantity-{{ section.id }}-{{ item.index | plus: 1 }}"
                                        data-index="{{ item.index | plus: 1 }}"
                                        {% unless is_decimal_unit %}size="2"{% endunless %}
                                        inputmode="numeric"
                                        autocomplete="off"
                                        data-quantity-variant-id="{{ item.variant.id }}"
                                        data-cart-quantity="{{ cart | item_count_for_variant: item.variant.id }}"
                                        data-decimal="{% if is_decimal_unit %}true{% else %}false{% endif %}"
                                        {% if is_decimal_unit %}
                                          step="0,05"
                                          data-min="0,05"
                                          min="0,05"
                                          data-unit="{{ quantity_unit }}"
                                        {% else %}
                                          step="{{ item.variant.quantity_rule.increment }}"
                                          data-min="{{ item.variant.quantity_rule.min }}"
                                          min="{{ item.variant.quantity_rule.min }}"
                                        {% endif %}
                                        {% if item.variant.quantity_rule.max != null %}
                                          max="{% if is_decimal_unit %}{{ item.variant.quantity_rule.max | divided_by: 20.0 | replace: '.', ',' }}{% else %}{{ item.variant.quantity_rule.max }}{% endif %}"
                                        {% endif %}
                                      />
                                      <button type="button" name="plus" class="quantity__button" aria-label="{{ 'products.product.quantity.increase' | t: product: item.product.title | escape }}">
                                        <svg width="16" height="16" viewBox="0 0 15 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                                          <path d="M2.6875 7H12.3125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                          <path d="M7.5 2.1875V11.8125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                        </svg>
                                      </button>
                                    </quantity-input>
                                    
                                    {% if quantity_unit != blank and quantity_unit != 'items' %}
                                      <span class="quantity-unit">{{ quantity_unit }}</span>  
                                    {% endif %}
                                  {%- else -%}
                                    <div class="cart-quantity quantity cart-quantity-gift-wrap">
                                      <label class="visually-hidden" for="Quantity-{{ section.id }}-{{ item.index | plus: 1 }}">{{ 'products.product.quantity.label' | t }}</label>
                                      <button type="button" name="minus" class="quantity__button hidden" disabled aria-label="{{ 'products.product.quantity.decrease' | t: product: item.product.title | escape }}">
                                        <svg width="16" height="16" viewBox="0 0 15 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                                          <path d="M2.6875 7H12.3125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                        </svg>
                                      </button>
                                      <input 
                                        class="quantity__input"
                                        disabled
                                        type="number"
                                        name="updates[]"
                                        value="{{ item.quantity }}"
                                        aria-label="{{ 'products.product.quantity.input_label' | t: product: item.product.title | escape }}"
                                        id="Quantity-{{ section.id }}-{{ item.index | plus: 1 }}"
                                        data-index="{{ item.index | plus: 1 }}"
                                        size="2"
                                        inputmode="numeric"
                                        autocomplete="off"
                                        data-quantity-variant-id="{{ item.variant.id }}"
                                        data-cart-quantity="{{ cart | item_count_for_variant: item.variant.id }}"
                                        min="0"
                                        data-min="{{ item.variant.quantity_rule.min }}"
                                        {% if item.variant.quantity_rule.max != null %}
                                          max="{{ item.variant.quantity_rule.max }}"
                                        {% endif %}
                                        step="{{ item.variant.quantity_rule.increment }}"
                                      />
                                      <button type="button" name="plus" disabled class="quantity__button hidden" aria-label="{{ 'products.product.quantity.increase' | t: product: item.product.title | escape }}">
                                        <svg width="16" height="16" viewBox="0 0 15 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                                          <path d="M2.6875 7H12.3125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                          <path d="M7.5 2.1875V11.8125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                        </svg>
                                      </button>
                                    </div>
                                  {%- endunless -%}
                                  {%- if has_qty_rules or has_vol_pricing -%}
                                    <button class="btn btn--plain volume-pricing-toggle" aria-controls="VolumnPricing-{{ section.id }}-{{ item.key }}">
                                      <svg class="icon icon-info icon--medium" viewBox="0 0 25 24" stroke="currentColor" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M12.5 16V11M13 8C13 8.27614 12.7761 8.5 12.5 8.5C12.2239 8.5 12 8.27614 12 8M13 8C13 7.72386 12.7761 7.5 12.5 7.5C12.2239 7.5 12 7.72386 12 8M13 8H12M22.5 12C22.5 17.5228 18.0228 22 12.5 22C6.97715 22 2.5 17.5228 2.5 12C2.5 6.47715 6.97715 2 12.5 2C18.0228 2 22.5 6.47715 22.5 12Z"></path>
                                      </svg>
                                    </button>
                                    <basic-modal class="drawer drawer--right" id="VolumnPricing-{{ section.id }}-{{ item.key }}" hidden>
                                      <div
                                        class="fixed-overlay absolute"
                                        aria-controls="VolumnPricing-{{ section.id }}-{{ item.key }}"
                                      ></div>
                                      <div class="drawer__inner v-scrollable">
                                        <button
                                          aria-controls="VolumnPricing-{{ section.id }}-{{ item.key }}"
                                          class="drawer__close-btn z-1"
                                        >
                                          {%- render 'icon-close' -%}
                                        </button>
                                        <div class="drawer__content cart-addons-drawer__content grid gap-5">
                                          <div>
                                            <h4>{{ item.product.title | escape }}</h4>
                                            {% if item.product.has_only_default_variant == false %}
                                              {%- assign last_index = item.options_with_values.size | minus: 1 -%}
                                              <div class="flex gap-1">
                                                {% for option in item.options_with_values %}
                                                  <span class="text-sm text-subtext">
                                                    {{- option.value -}}
                                                    {%- unless forloop.index0 == last_index %},{% endunless -%}
                                                  </span>
                                                {% endfor %}
                                              </div>
                                            {% endif %}
                                          </div>
                                          <div class="grid gap-3">
                                            {{ qty_rules_vol_pricing }}
                                          </div>
                                        </div>
                                      </div>
                                    </basic-modal>
                                  {%- endif -%}
                                </div>
                                <div class="grid gap-2 lg:hidden">
                                  {%- if item.line_level_discount_allocations != blank -%}
                                    <ul class="cart-item__discounts discounts list-unstyled flex justify-end gap-1" role="list" aria-label="{{ 'customer.order.discount' | t }}">
                                      {%- for discount_allocation in item.line_level_discount_allocations -%}
                                        <li class="discount text-sm-extra font-body-bold flex items-center gap-2">
                                          {% render 'icon-discount' %}
                                          <span>{{ discount_allocation.discount_application.title }}</span>
                                        </li>
                                      {%- endfor -%}
                                    </ul>
                                  {%- endif -%}
                                  <div class="cart-item__prices">
                                    <div class="price text-right flex flex-wrap items-center gap-x-2 font-body-bolder{% if item.original_price != item.final_price %} price--on-sale{% endif %}">
                                      {%- liquid
                                        assign money_price = item.original_price | money
                                        if settings.currency_code_enabled
                                          assign money_price = item.original_price | money_with_currency
                                        endif
                                      -%}
                                      {%- if item.original_price != item.final_price -%}
                                        <span class="visually-hidden">{{ 'products.product.price.regular_price' | t }}</span>
                                        <span class="visually-hidden">{{ 'products.product.price.sale_price' | t }}</span>
                                        <span class="price__regular">
                                          {%- liquid 
                                            if settings.currency_code_enabled
                                              echo item.final_price | money_with_currency
                                            else
                                              echo item.final_price | money
                                            endif  
                                          -%}
                                        </span>
                                        <s class="price__sale font-body text-subtext">{{ money_price }}</s>
                                      {%- else -%}
                                        {{- money_price -}}
                                      {%- endif -%}
            
                                      {%- if item.variant.available and item.unit_price_measurement -%}
                                        <span class="visually-hidden">{{ 'products.product.price.unit_price' | t }}</span>
                                        <span class="unit-price flex items-center font-body text-sm text-subtext">
                                          {%- liquid
                                            capture unit_price_base_unit
                                              if item.variant.unit_price_measurement
                                                if item.variant.unit_price_measurement.reference_value != 1
                                                  echo item.variant.unit_price_measurement.reference_value
                                                endif
                                                echo item.variant.unit_price_measurement.reference_unit
                                              endif
                                            endcapture
                                          -%}
                                          ({{ item.variant.unit_price | money }}
                                          <span aria-hidden="true">/</span>
                                          <span class="visually-hidden">&nbsp;{{ 'accessibility.unit_price_separator' | t }}&nbsp;</span>
                                          {{ unit_price_base_unit }})
                                          </span>
                                      {%- endif -%}
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </template>
                          </div>
                        </div>
                      </td>

                      <td class="cart-item__quantity hidden lg:table-cell">
                        <div class="cart-item__action flex items-center cart-item__quantity-wrapper">
                          <template>
                            <div class="flex items-center gap-2">
                              {%- unless is_gift_wrap_item -%}
                                {%- assign is_decimal_unit = false -%}
                                {%- assign quantity_unit = 'items' -%}
                                {%- if item.variant.metafields.custom.standard_unit and item.variant.metafields.custom.standard_unit.value -%}
                                  {%- assign unit = item.variant.metafields.custom.standard_unit.value -%}
                                  
                                  {%- comment -%}
                                  Use same logic as cart drawer: whitelist approach for whole number units
                                  {%- endcomment -%}
                                  {%- assign whole_number_units = 'st,rle,pkt,pås,Sk,krt,frp' | split: ',' -%}
                                  {%- assign is_decimal_unit = true -%}
                                  {%- assign quantity_unit = unit -%}
                                  
                                  {%- for whole_unit in whole_number_units -%}
                                    {%- if unit == whole_unit -%}
                                      {%- assign is_decimal_unit = false -%}
                                      {%- break -%}
                                    {%- endif -%}
                                  {%- endfor -%}
                                {%- endif -%}
                                
                                <quantity-input class="cart-quantity quantity" data-is-decimal="{{ is_decimal_unit }}">
                                  <label class="visually-hidden" for="Quantity-{{ section.id }}-{{ item.index | plus: 1 }}">{{ 'products.product.quantity.label' | t }}</label>
                                  <button type="button" name="minus" class="quantity__button" aria-label="{{ 'products.product.quantity.decrease' | t: product: item.product.title | escape }}">
                                    <svg width="16" height="16" viewBox="0 0 15 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                                      <path d="M2.6875 7H12.3125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    </svg>
                                  </button>
                                  <input class="quantity__input"
                                    {% if is_decimal_unit %}type="text"{% else %}type="number"{% endif %}
                                    {% if is_decimal_unit %}
                                      name="quantity_decimal_{{ item.variant.id }}"
                                      data-cart-updates-name="updates[]"
                                      data-cart-updates-index="{{ item.index }}"
                                      value="{{ item.quantity | divided_by: 20.0 | round: 2 | replace: '.', ',' }}"
                                    {% else %}
                                      name="updates[]"
                                      value="{{ item.quantity }}"
                                    {% endif %}
                                    aria-label="{{ 'products.product.quantity.input_label' | t: product: item.product.title | escape }}"
                                    id="Quantity-{{ section.id }}-{{ item.index | plus: 1 }}"
                                    data-index="{{ item.index | plus: 1 }}"
                                    {% unless is_decimal_unit %}size="2"{% endunless %}
                                    inputmode="numeric"
                                    autocomplete="off"
                                    data-quantity-variant-id="{{ item.variant.id }}"
                                    data-cart-quantity="{{ cart | item_count_for_variant: item.variant.id }}"
                                    data-decimal="{% if is_decimal_unit %}true{% else %}false{% endif %}"
                                    {% if is_decimal_unit %}
                                      step="0,05"
                                      data-min="0,05"
                                      min="0,05"
                                      data-unit="{{ quantity_unit }}"
                                    {% else %}
                                      step="{{ item.variant.quantity_rule.increment }}"
                                      data-min="{{ item.variant.quantity_rule.min }}"
                                      min="{{ item.variant.quantity_rule.min }}"
                                    {% endif %}
                                    {% if item.variant.quantity_rule.max != null %}
                                      max="{% if is_decimal_unit %}{{ item.variant.quantity_rule.max | divided_by: 20.0 | replace: '.', ',' }}{% else %}{{ item.variant.quantity_rule.max }}{% endif %}"
                                    {% endif %}
                                  />
                                  <button type="button" name="plus" class="quantity__button" aria-label="{{ 'products.product.quantity.increase' | t: product: item.product.title | escape }}">
                                    <svg width="16" height="16" viewBox="0 0 15 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                                      <path d="M2.6875 7H12.3125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                      <path d="M7.5 2.1875V11.8125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    </svg>
                                  </button>
                                </quantity-input>
                                
                                {% if quantity_unit != blank and quantity_unit != 'items' %}
                                  <span class="quantity-unit">{{ quantity_unit }}</span>
                                {% endif %}
                              {%- else -%}
                                <div class="cart-quantity quantity cart-quantity-gift-wrap">
                                  <label class="visually-hidden" for="Quantity-{{ section.id }}-{{ item.index | plus: 1 }}">{{ 'products.product.quantity.label' | t }}</label>
                                  <button type="button" name="minus" class="quantity__button hidden" disabled aria-label="{{ 'products.product.quantity.decrease' | t: product: item.product.title | escape }}">
                                    <svg width="16" height="16" viewBox="0 0 15 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                                      <path d="M2.6875 7H12.3125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    </svg>
                                  </button>
                                  <input 
                                    class="quantity__input"
                                    disabled
                                    type="number"
                                    name="updates[]"
                                    value="{{ item.quantity }}"
                                    aria-label="{{ 'products.product.quantity.input_label' | t: product: item.product.title | escape }}"
                                    id="Quantity-{{ section.id }}-{{ item.index | plus: 1 }}"
                                    data-index="{{ item.index | plus: 1 }}"
                                    size="2"
                                    inputmode="numeric"
                                    autocomplete="off"
                                    data-quantity-variant-id="{{ item.variant.id }}"
                                    data-cart-quantity="{{ cart | item_count_for_variant: item.variant.id }}"
                                    min="0"
                                    data-min="{{ item.variant.quantity_rule.min }}"
                                    {% if item.variant.quantity_rule.max != null %}
                                      max="{{ item.variant.quantity_rule.max }}"
                                    {% endif %}
                                    step="{{ item.variant.quantity_rule.increment }}"
                                  />
                                  <button type="button" name="plus" disabled class="quantity__button hidden" aria-label="{{ 'products.product.quantity.increase' | t: product: item.product.title | escape }}">
                                    <svg width="16" height="16" viewBox="0 0 15 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                                      <path d="M2.6875 7H12.3125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                      <path d="M7.5 2.1875V11.8125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    </svg>
                                  </button>
                                </div>
                              {%- endunless -%}
                              {%- if has_qty_rules or has_vol_pricing -%}
                                <button class="btn btn--plain volume-pricing-toggle" aria-controls="VolumnPricing-{{ section.id }}-{{ item.key }}">
                                  <svg class="icon icon-info icon--medium" viewBox="0 0 25 24" stroke="currentColor" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M12.5 16V11M13 8C13 8.27614 12.7761 8.5 12.5 8.5C12.2239 8.5 12 8.27614 12 8M13 8C13 7.72386 12.7761 7.5 12.5 7.5C12.2239 7.5 12 7.72386 12 8M13 8H12M22.5 12C22.5 17.5228 18.0228 22 12.5 22C6.97715 22 2.5 17.5228 2.5 12C2.5 6.47715 6.97715 2 12.5 2C18.0228 2 22.5 6.47715 22.5 12Z"></path>
                                  </svg>
                                </button>
                                <basic-modal class="drawer drawer--right" id="VolumnPricing-{{ section.id }}-{{ item.key }}" hidden>
                                  <div
                                    class="fixed-overlay absolute"
                                    aria-controls="VolumnPricing-{{ section.id }}-{{ item.key }}"
                                  ></div>
                                  <div class="drawer__inner v-scrollable">
                                    <button
                                      aria-controls="VolumnPricing-{{ section.id }}-{{ item.key }}"
                                      class="drawer__close-btn z-1"
                                    >
                                      {%- render 'icon-close' -%}
                                    </button>
                                    <div class="drawer__content cart-addons-drawer__content grid gap-5">
                                      <div>
                                        <h4>{{ item.product.title | escape }}</h4>
                                        {% if item.product.has_only_default_variant == false %}
                                          {%- assign last_index = item.options_with_values.size | minus: 1 -%}
                                          <div class="flex gap-1">
                                            {% for option in item.options_with_values %}
                                              <span class="text-sm text-subtext">
                                                {{- option.value -}}
                                                {%- unless forloop.index0 == last_index %},{% endunless -%}
                                              </span>
                                            {% endfor %}
                                          </div>
                                        {% endif %}
                                      </div>
                                      <div class="grid gap-3">
                                        {{ qty_rules_vol_pricing }}
                                      </div>
                                    </div>
                                  </div>
                                </basic-modal>
                              {%- endif -%}
                            </div>
                          </template>
                        </div>
                      </td>
  
                      <td class="cart-item__total hidden lg:table-cell">
                        <span class="font-body-bolder">
                          {%- liquid
                            assign is_decimal_unit = false
                            assign quantity_unit = 'items'
                            if item.variant.metafields.custom.standard_unit and item.variant.metafields.custom.standard_unit.value
                              assign unit = item.variant.metafields.custom.standard_unit.value
                              assign quantity_unit = unit
                              
                              # Use same logic as cart drawer: whitelist approach for whole number units
                              assign whole_number_units = 'st,rle,pkt,pås,Sk,krt,frp' | split: ','
                              assign is_decimal_unit = true
                              
                              for whole_unit in whole_number_units
                                if unit == whole_unit
                                  assign is_decimal_unit = false
                                  break
                                endif
                              endfor
                            endif
                            
                            if is_decimal_unit
                              assign display_quantity = item.quantity | divided_by: 20.0
                              assign unit_price = item.final_price
                              assign line_total = unit_price | times: display_quantity
                              if settings.currency_code_enabled
                                echo line_total | money_with_currency
                              else
                                echo line_total | money
                              endif
                            else
                              if settings.currency_code_enabled
                                echo item.final_line_price | money_with_currency
                              else
                                echo item.final_line_price | money
                              endif
                            endif
                          -%}
                        </span>
                      </td>
                    </tr>
                  {%- endcapture -%}

                {%- liquid
                  unless is_gift_wrap_item
                    echo cart_item
                  else
                    assign cart_gift_wrap_item = cart_item
                  endunless
                -%}
              {%- endfor -%}
              {%- liquid
                if cart_gift_wrap_item
                  echo cart_gift_wrap_item
                endif
              -%}
            </tbody>
          </table>
        </cart-items>
      </form>

      <div class="cart__footer flex flex-col{% unless cart.item_count > 0 %} hidden{% endunless %}">
        <div class="sticky-element">
          {%- liquid
            for block in section.blocks
              if block.type == 'free_shipping_goal'
                if settings.free_shipping_minimum_amount != blank
                  assign minimum_amount = settings.free_shipping_minimum_amount | remove: ' '
                  render 'free-shipping-goal', minimum_amount: minimum_amount
                endif
              endif
            endfor
          -%}
          <div class="cart__footer-wrapper grid gap-6">
            {%- render 'gift-wrapping',
              section_id: section.id,
              gift_wrapping: gift_wrapping,
              gift_wrap_id: gift_wrap_id,
              gift_wraps_in_cart: gift_wraps_in_cart,
              items_in_cart: items_in_cart
            -%}
            {%- for block in section.blocks -%}
              {%- case block.type -%}
                {%- when '@app' -%}
                  {%- render block -%}
                {%- when 'subtotal' -%}
                  <div class="cart__footer--subtotal" data-cart-subtotal {{ block.shopify_attributes }}>
                    <div class="grid gap-1">
                      {%- if cart.cart_level_discount_applications.size > 0 -%}
                        <ul
                          class="discounts list-unstyled flex gap-1"
                          role="list"
                          aria-label="{{ 'customer.order.discount' | t }}"
                        >
                          {%- for discount in cart.cart_level_discount_applications -%}
                            <li class="discount text-sm-extra font-body-bold flex items-center">
                              {% render 'icon-discount' %}
                              <span>{{- discount.title -}}</span>
                              <span class="font-body-bold">(-{{ discount.total_allocated_amount | money }})</span>
                            </li>
                          {%- endfor -%}
                        </ul>
                      {%- endif -%}
                      <div class="totals flex justify-between items-center h5">
                        <span class="totals__subtotal">
                          {{- 'sections.cart.estimated_total' | t -}}
                        </span>
                        <span class="totals__subtotal-value">
                          {{- cart.total_price | money_with_currency -}}
                        </span>
                      </div>
                      <div class="tax-note text-sm-extra">
                        {%- liquid
                          if cart.taxes_included and shop.shipping_policy.body != blank
                            echo 'sections.cart.taxes_included_and_shipping_policy_html' | t: link: shop.shipping_policy.url
                          elsif cart.taxes_included
                            echo 'sections.cart.taxes_included_but_shipping_at_checkout' | t
                          elsif shop.shipping_policy.body != blank
                            echo 'sections.cart.taxes_and_shipping_policy_at_checkout_html' | t: link: shop.shipping_policy.url
                          else
                            echo 'sections.cart.taxes_and_shipping_at_checkout' | t
                          endif
                        -%}
                      </div>
                    </div>
                  </div>
                {%- when 'buttons' -%}
                  <div class="cart__footer--buttons grid gap-3" {{ block.shopify_attributes }}>
                    {% comment %}
                      <noscript>
                        <button class="btn btn--primary w-full" type="submit" name="update" form="cart">
                          <span class="btn__text">{{- 'sections.cart.update' | t -}}</span>
                        </button>
                      </noscript>
                    {% endcomment %}

                    <button class="btn btn--primary w-full" type="submit" form="cart" name="checkout">
                      <span class="btn__text">{{ 'sections.cart.checkout' | t }}</span>
                    </button>

                    {% if additional_checkout_buttons %}
                      <div class="additional-checkout-buttons no-js-hidden">
                        {{ content_for_additional_checkout_buttons }}
                      </div>
                    {% endif %}
                  </div>
                {%- when 'cart_note' -%}
                  <div class="cart__addon cart__footer--cart-note no-js-hidden" {{ block.shopify_attributes }}>
                    <details is="accordion-details" class="accordion-details cart-accordion-details">
                      <summary class="accordion-details__summary flex items-center justify-between h6">
                        <div class="flex gap-2 items-center">
                          {{ 'general.cart.note.title' | t }}
                        </div>
                        {%- render 'icon-caret-down', size: 'small' -%}
                      </summary>
                      <cart-note class="flex flex-col items-start gap-5 accordion-details__content">
                        <div class="form-field w-full">
                          <textarea
                            name="note"
                            class="form-control form-control--textarea"
                            rows="5"
                            form="cart"
                            placeholder="{{ 'general.cart.note.caption' | t }}"
                            id="CartNoteForm-{{ section.id }}"
                          >{{ cart.note }}</textarea>
                          <label class="visually-hidden" for="CartNoteForm-{{ section.id }}">
                            {{- 'general.cart.note.title' | t -}}
                          </label>
                        </div>
                        <button
                          class="btn btn--primary"
                          type="button"
                        >
                          <span class="btn__text">{{ 'general.cart.note.button' | t }}</span>
                        </button>
                      </cart-note>
                    </details>
                  </div>
                  
                  <!-- Always visible Order Mark section (right after cart note) -->
                  <div class="cart__addon cart__footer--order-mark no-js-hidden">
                    <details is="accordion-details" class="accordion-details cart-accordion-details">
                      <summary class="accordion-details__summary flex items-center justify-between h6">
                        <div class="flex gap-2 items-center">
                          Kommentar
                        </div>
                        {%- render 'icon-caret-down', size: 'small' -%}
                      </summary>
                      <div class="flex flex-col items-start gap-5 accordion-details__content">
                        <div class="form-field w-full">
                          <textarea
                            name="order_mark"
                            class="form-control form-control--textarea"
                            rows="3"
                            form="cart"
                            placeholder="Ange om du har specifika önskemål kring beställning"
                            id="CartOrderMarkForm-{{ section.id }}"
                          >{{ cart.attributes['order_mark'] }}</textarea>
                          <label class="visually-hidden" for="CartOrderMarkForm-{{ section.id }}">
                            Kommentar
                          </label>
                        </div>
                        <button
                          class="btn btn--primary"
                          type="button"
                          is="order-mark-save"
                        >
                          <span class="btn__text">{{ 'general.cart.note.button' | t }}</span>
                        </button>
                      </div>
                    </details>
                  </div>
                {%- when 'cart_shipping_rate' -%}
                  <div
                    class="cart__addon cart__footer--shipping-rate no-js-hidden"
                    class="{{ block.shopify_attributes }}"
                  >
                    <details is="accordion-details" class="accordion-details cart-accordion-details">
                      <summary class="accordion-details__summary flex items-center justify-between h6">
                        <div class="flex gap-2 items-center">
                          {{ 'general.cart.shipping_calculator.title' | t }}
                        </div>
                        {%- render 'icon-caret-down', size: 'small' -%}
                      </summary>
                      <form
                        class="grid gap-4 accordion-details__content"
                        action="{{ routes.cart_url }}"
                        method="POST"
                        novalidate
                        is="shipping-calculator"
                      >
                        <country-province
                          class="grid gap-4"
                          {% if shop.customer_accounts_enabled and customer %}
                            data-country="{{ customer.default_address.country }}"
                            {%- if customer.default_address.province != '' %}
                              data-province="{{ customer.default_address.province }}"
                            {%- endif -%}
                          {% endif %}
                          data-template="{{ template }}"
                        >
                          <div class="form-field reset-spacing">
                            <label class="form-label" for="ShippingCalculatorCountry-{{ section.id }}">
                              {{- 'customer.addresses.country' | t -}}
                            </label>
                            <div class="select">
                              <select
                                name="address[country]"
                                class="form-control form-control--select"
                                autocomplete="country"
                                id="ShippingCalculatorCountry-{{ section.id }}"
                              >
                                {{- all_country_option_tags -}}
                              </select>
                              {%- render 'icon-caret-down', size: 'small' -%}
                            </div>
                          </div>
                          <div class="form-field reset-spacing" hidden>
                            <label class="form-label" for="ShippingCalculatorProvince-{{ section.id }}">
                              {{- 'customer.addresses.province' | t -}}
                            </label>
                            <div class="select">
                              <select
                                name="address[province]"
                                class="form-control form-control--select"
                                autocomplete="address-level1"
                                id="ShippingCalculatorProvince-{{ section.id }}"
                              ></select>
                              {%- render 'icon-caret-down', size: 'small' -%}
                            </div>
                          </div>
                        </country-province>
                        <div class="form-field">
                          <label class="form-label" for="ShippingCalculatorZip-{{ section.id }}">
                            {{- 'customer.addresses.zip' | t -}}
                          </label>
                          <input
                            name="address[zip]"
                            class="form-control form-control--input"
                            type="text"
                            autocapitalize="characters"
                            autocomplete="postal-code"
                            placeholder=" "
                            id="ShippingCalculatorZip-{{ section.id }}"
                            {% if shop.customer_accounts_enabled and customer %}
                              value="{{ customer.default_address.zip }}"
                            {% endif %}
                          >
                        </div>
                        <div class="">
                          <button class="btn btn--primary" type="submit">
                            <span class="btn__text">{{ 'general.cart.shipping_calculator.button' | t }}</span>
                            {%- render 'loading-spinner' -%}
                          </button>
                        </div>
                        <div class="grid gap-3"></div>
                      </form>
                    </details>
                  </div>
              {%- endcase -%}
            {%- endfor -%}
          </div>
        </div>
      </div>
    </main-cart>
    {% comment %} {%- endif -%} {% endcomment %}
  </div>
  <!-- START: Dynamic pricing -->
<style>
/* Hide cart prices initially until dynamic pricing loads (or keep hidden for non-logged-in customers) */
.cart .cart-item__prices .price,
.cart .cart-item__total .font-body-bolder,
.cart .totals__subtotal-value {
  visibility: hidden;
}

/* Show prices for f-price--loading elements when they're made visible via JS */
.cart .price.f-price--loading {
  visibility: hidden !important;
}
</style>
  {% if customer %}
<script>
// Set up customer object first
window.customer = {
  id: {{ customer.id | json }},
  email: {{ customer.email | json }},
  first_name: {{ customer.first_name | json }},
  last_name: {{ customer.last_name | json }}
};

// Pre-populate cart item metafields using Liquid (same approach as product page!)
window.cartItemsMetafields = {
  {% for item in cart.items %}
    "{{ item.variant_id }}": {
      monitorId: "{{ item.variant.metafields.custom.monitor_id }}",
      customerMonitorId: "{{ customer.metafields.custom.monitor_id }}",
      customerDiscountCategory: "{{ customer.metafields.custom.discount_category }}",
      customerPriceListId: "{{ customer.metafields.custom.pricelist_id }}",
      standardUnit: "{{ item.variant.metafields.custom.standard_unit }}",
      {% assign is_outlet = false %}
      {% for collection in item.product.collections %}
        {% if collection.handle == 'outlet' %}
          {% assign is_outlet = true %}
          {% break %}
        {% endif %}
      {% endfor %}
      isOutletProduct: {{ is_outlet }}
    }{% unless forloop.last %},{% endunless %}
  {% endfor %}
};

// Enhanced checkout for dynamic pricing - Cart Page
document.addEventListener('DOMContentLoaded', () => {
  console.log('DOMContentLoaded - initializing cart checkout interception');
  // Helper function to format price with Swedish comma decimal separator
  function formatPrice(price) {
    return price.toFixed(2).replace('.', ',');
  }
  
  // Order mark persistence functionality
  function setupOrderMarkPersistence() {
    const orderMarkButton = document.querySelector('button[is="order-mark-save"]');
    if (orderMarkButton) {
      orderMarkButton.addEventListener('click', async () => {
        const orderMarkTextarea = document.querySelector('textarea[name="order_mark"][form="cart"]');
        if (!orderMarkTextarea) return;
        
        const orderMarkValue = orderMarkTextarea.value.trim();
        
        try {
          // Save order mark to cart attributes
          const response = await fetch('/cart/update.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              attributes: {
                'order_mark': orderMarkValue
              }
            })
          });
          
          if (response.ok) {
            console.log('Order mark saved to cart:', orderMarkValue);
            // Show success feedback (optional)
            const btnText = orderMarkButton.querySelector('.btn__text');
            const originalText = btnText.textContent;
            btnText.textContent = 'Sparad!';
            setTimeout(() => {
              btnText.textContent = originalText;
            }, 1500);
          } else {
            console.error('Failed to save order mark to cart');
          }
        } catch (error) {
          console.error('Error saving order mark:', error);
        }
      });
    }
  }
  
  // Initialize order mark persistence
  setupOrderMarkPersistence();
  
  // Cache to prevent multiple API calls for the same variant
  const priceCache = new Map();
  
  // Helper function to set loading state for cart prices
  function setCartPricesLoading() {
    if (!window.customer?.id) return;
    
    console.log('Setting cart prices loading state...');
    
    // Simply hide all cart price elements until they load
    const cartRows = document.querySelectorAll('tr[id^="CartItem-"]');
    console.log(`Found ${cartRows.length} cart rows`);
    
    cartRows.forEach((row, index) => {
      const priceElements = row.querySelectorAll('.cart-item__prices .price');
      priceElements.forEach((priceElement) => {
        priceElement.classList.add('f-price--loading');
        priceElement.style.visibility = 'hidden';
      });
      
      // Hide line totals
      const lineTotalCell = row.querySelector('.cart-item__total .font-body-bolder');
      if (lineTotalCell) {
        lineTotalCell.style.visibility = 'hidden';
      }
    });
    
    // Hide cart total while loading
    const totalElement = document.querySelector('.totals__subtotal-value');
    if (totalElement) {
      totalElement.style.visibility = 'hidden';
    }
  }
  
  // Helper function to show prices after loading
  function showCartPrices() {
    console.log('Showing cart prices...');
    
    const cartRows = document.querySelectorAll('tr[id^="CartItem-"]');
    cartRows.forEach((row) => {
      const priceElements = row.querySelectorAll('.cart-item__prices .price');
      priceElements.forEach((priceElement) => {
        priceElement.classList.remove('f-price--loading');
        priceElement.style.visibility = 'visible';
      });
      
      // Show line totals
      const lineTotalCell = row.querySelector('.cart-item__total .font-body-bolder');
      if (lineTotalCell) {
        lineTotalCell.style.visibility = 'visible';
      }
    });
    
    // Show cart total
    const totalElement = document.querySelector('.totals__subtotal-value');
    if (totalElement) {
      totalElement.style.visibility = 'visible';
    }
  }
  
  // Function to update cart prices
  async function updateCartPrices() {
    if (!window.customer?.id) {
      // For non-logged-in customers, hide all prices - no pricing available
      return;
    }
    
    console.log('Updating cart page prices...');
    console.log('Cart metafields data:', window.cartItemsMetafields);
    
    // Set loading state first
    setCartPricesLoading();
    
    try {
      // Get cart items
      const cartResponse = await fetch('/cart.js');
      const cart = await cartResponse.json();
      let cartTotal = 0;
      
      // Update each cart item price
      for (let index = 0; index < cart.items.length; index++) {
        const item = cart.items[index];
        const variantId = `gid://shopify/ProductVariant/${item.variant_id}`;
        const customerId = `gid://shopify/Customer/${window.customer.id}`;
        const cacheKey = `${item.variant_id}-${window.customer.id}`;
        
        console.log(`Getting price for variant ${item.variant_id} (index ${index})`);
        
        // Check cache first
        let priceData = priceCache.get(cacheKey);
        
        if (!priceData) {
          // Get metafields from pre-populated data (same as product page approach!)
          const itemMetafields = window.cartItemsMetafields[item.variant_id] || {};
          
          console.log(`Using pre-populated metafields for ${item.variant_id}:`, itemMetafields);
          
          // Get dynamic price using Liquid template data (no API metafield fetching needed!)
          const apiUrl = 'https://monitor-api-connect-production.up.railway.app/api/pricing-public';
          const priceResponse = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              variantId: variantId,
              customerId: customerId,
              shop: window.Shopify?.shop?.domain || window.location.hostname,
              // Use pre-populated metafields from Liquid templates!
              monitorId: itemMetafields.monitorId || null,
              isOutletProduct: itemMetafields.isOutletProduct || false,
              customerMonitorId: itemMetafields.customerMonitorId || null,
              customerDiscountCategory: itemMetafields.customerDiscountCategory || null,
              customerPriceListId: itemMetafields.customerPriceListId || null
              // No fetchMetafields needed - we have the data already!
            })
          });
          
          console.log(`Price response status: ${priceResponse.status}`);
          
          if (!priceResponse.ok) {
            console.error(`Price API error: ${priceResponse.status} ${priceResponse.statusText}`);
            continue;
          }
          
          const responseText = await priceResponse.text();
          console.log(`Price response text: ${responseText}`);
          
          try {
            priceData = JSON.parse(responseText);
            // Cache the result
            priceCache.set(cacheKey, priceData);
          } catch (parseError) {
            console.error(`JSON parse error for variant ${item.variant_id}:`, parseError);
            continue;
          }
        } else {
          console.log(`Using cached price for variant ${item.variant_id}:`, priceData.price);
        }
        
        if (priceData.price !== null && priceData.price !== undefined) {
          // Get metafields from pre-populated data
          const itemMetafields = window.cartItemsMetafields[item.variant_id] || {};
          
          // Check if this is a decimal unit product using same logic as Liquid template
          const wholeNumberUnits = ['st', 'rle', 'pkt', 'pås', 'Sk', 'krt', 'frp'];
          const isDecimalUnit = itemMetafields.standardUnit && 
            !wholeNumberUnits.includes(itemMetafields.standardUnit);
          
          console.log(`Variant ${item.variant_id} - Unit: ${itemMetafields.standardUnit}, IsDecimal: ${isDecimalUnit}, Quantity: ${item.quantity}`);
          
          // For decimal products, convert quantity for cart total calculation
          const displayQuantity = isDecimalUnit ? item.quantity / 20.0 : item.quantity;
          cartTotal += priceData.price * displayQuantity;
          
          console.log(`Updated price for ${item.variant_id}: ${priceData.price} kr (quantity: ${displayQuantity})`);
          
          // Find the cart row by its actual position (1-based indexing for HTML IDs)
          const itemNumber = index + 1;
          const cartRow = document.querySelector(`tr#CartItem-${itemNumber}`);
          
          console.log(`Looking for cart row: #CartItem-${itemNumber}, found:`, !!cartRow);
          
          if (cartRow) {
            // Update individual item price displays
            const priceElements = cartRow.querySelectorAll('.cart-item__prices .price');
            console.log(`Found ${priceElements.length} price elements for item ${itemNumber}`);
            
            priceElements.forEach((priceElement, priceIndex) => {
              console.log(`Updating price element ${priceIndex} for item ${itemNumber}`);
              // Handle both regular and sale price structures
              const hasDiscount = priceElement.classList.contains('price--on-sale');
              if (hasDiscount) {
                // Update the sale price span
                const salePriceSpan = priceElement.querySelector('.price__regular');
                if (salePriceSpan) {
                  salePriceSpan.textContent = `${formatPrice(priceData.price)} kr`;
                }
              } else {
                // Update the regular price - replace entire content
                priceElement.innerHTML = `${formatPrice(priceData.price)} kr`;
              }
            });
            
            // Update line total (price × quantity) in the last column
            const lineTotalCell = cartRow.querySelector('.cart-item__total .font-body-bolder');
            if (lineTotalCell) {
              // Use displayQuantity (already converted for decimal units)
              const lineTotal = priceData.price * displayQuantity;
              lineTotalCell.textContent = `${formatPrice(lineTotal)} kr`;
              console.log(`Updated line total for item ${itemNumber}: ${formatPrice(lineTotal)} kr (${priceData.price} × ${displayQuantity})`);
            }
          } else {
            console.warn(`Could not find cart row for item ${itemNumber}`);
          }
        }
      }
      
      // Update cart total display
      const totalElement = document.querySelector('.totals__subtotal-value');
      if (totalElement && cartTotal > 0) {
        totalElement.textContent = `${formatPrice(cartTotal)} kr`;
        console.log(`Updated cart total: ${formatPrice(cartTotal)} kr`);
      }
      
      // Remove loading state and show all prices
      showCartPrices();
      
    } catch (error) {
      console.error('Error updating cart prices:', error);
      // Show prices even on error to prevent permanent hidden state
      showCartPrices();
    }
  }
  
  // Initial setup
  if (!window.customer?.id) {
    // For non-logged-in customers, keep prices hidden - no pricing available
    console.log('Non-logged-in customer - prices will remain hidden');
  } else {
    // For logged-in customers, update prices with loading state
    console.log('Customer found, starting price update in 2 seconds...');
    setTimeout(updateCartPrices, 2000); // Increased delay to see spinners
  }
  
  // Update when cart items change
  document.addEventListener('cart:updated', () => {
    console.log('Cart updated event, refreshing prices...');
    setTimeout(updateCartPrices, 100);
  });
  
  // Target the specific checkout button in cart page footer
  const checkoutBtn = document.querySelector('button[name="checkout"][form="cart"]');
  
  if (checkoutBtn) {
    console.log('Found checkout button:', checkoutBtn);
    console.log('Customer object:', window.customer);
    console.log('Customer ID:', window.customer?.id);
    
    // Mark as intercepted
    checkoutBtn.setAttribute('data-checkout-intercepted', 'true');
    
    // Strategy 4: Direct onclick handler (as backup)
    const originalOnClick = checkoutBtn.onclick;
    checkoutBtn.onclick = async function(e) {
      console.log('Direct onclick handler fired');
      console.log('Customer check in onclick:', window.customer?.id);
      await handleCheckoutInterception(e);
      if (originalOnClick) originalOnClick.call(this, e);
    };
    
    // Use multiple event handling strategies for maximum compatibility
    
    // Strategy 1: Capture phase click event (fires before other handlers)
    checkoutBtn.addEventListener('click', async (e) => {
      console.log('Capture phase click event fired');
      console.log('Customer check in capture click:', window.customer?.id);
      await handleCheckoutInterception(e);
    }, { capture: true });
    
    // Strategy 2: Normal click event 
    checkoutBtn.addEventListener('click', async (e) => {
      console.log('Normal click event fired');
      console.log('Customer check in normal click:', window.customer?.id);
      await handleCheckoutInterception(e);
    });
    
    // Strategy 3: Form submission interception
    const cartForm = document.getElementById('cart');
    if (cartForm) {
      cartForm.addEventListener('submit', async (e) => {
        console.log('Form submit event fired');
        console.log('Customer check in submit:', window.customer?.id);
        await handleCheckoutInterception(e);
      }, { capture: true });
    }
    
    async function handleCheckoutInterception(e) {
      console.log('handleCheckoutInterception called');
      console.log('Event type:', e.type);
      console.log('Event target:', e.target);
      console.log('window.customer:', window.customer);
      console.log('window.customer?.id:', window.customer?.id);
      
      if (window.customer?.id) {
        console.log('Customer found, preventing default checkout');
        e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation();
        
        // Additional prevention methods
        if (e.returnValue !== undefined) {
          e.returnValue = false;
        }
        
        console.log('Checkout intercepted! Creating draft order...');
        
        // Show loading
        const btnText = checkoutBtn.querySelector('.btn__text');
        const originalText = btnText.innerHTML;
        btnText.innerHTML = 'Tillämpar dina priser...';
        checkoutBtn.disabled = true;
        
        try {
          // Get current cart
          const cartResponse = await fetch('/cart.js');
          const cart = await cartResponse.json();
          
          // Create items array with corrected decimal quantities
          const items = cart.items.map((item, index) => {
            let actualQuantity = item.quantity;
            
            // Check if this is a decimal product using same logic as Liquid template
            const itemMetafields = window.cartItemsMetafields[item.variant_id] || {};
            const wholeNumberUnits = ['st', 'rle', 'pkt', 'pås', 'Sk', 'krt', 'frp'];
            const isDecimalUnit = itemMetafields.standardUnit && 
              !wholeNumberUnits.includes(itemMetafields.standardUnit);
            
            if (isDecimalUnit) {
              // This is a decimal product, convert integer quantity back to decimal
              actualQuantity = item.quantity / 20.0;
              console.log(`Converting decimal quantity for ${item.variant_id}: ${item.quantity} -> ${actualQuantity} ${itemMetafields.standardUnit}`);
            }
            
            return {
              variantId: `gid://shopify/ProductVariant/${item.variant_id}`,
              quantity: actualQuantity
            };
          });
          
          console.log('Creating draft order with items:', items);
          
          // Get customer's price list ID from the first cart item's metafields
          const firstItemMetafields = Object.values(window.cartItemsMetafields)[0] || {};
          const customerPriceListId = firstItemMetafields.customerPriceListId;
          
          console.log('Customer price list ID from metafields:', customerPriceListId);
          
          // Get goods label and order mark from cart
          const cartNoteElement = document.querySelector('textarea[name="note"][form="cart"]');
          const goodsLabel = cartNoteElement ? cartNoteElement.value.trim() : '';
          // Get order mark from cart attributes (persisted value)
          const orderMark = cart.attributes?.order_mark || '';
          console.log('Cart goods label:', goodsLabel);
          console.log('Cart order mark (from cart attributes):', orderMark);

          // Create draft order with dynamic pricing
          const response = await fetch('https://monitor-api-connect-production.up.railway.app/api/draft-order-public', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              customerId: `gid://shopify/Customer/${window.customer.id}`,
              items: items,
              shop: window.Shopify?.shop?.domain || window.location.hostname,
              priceListId: customerPriceListId, // Add the missing price list ID!
              goodsLabel: goodsLabel, // Add the goods label from cart note
              orderMark: orderMark // Add the order mark
            })
          });
          
          const result = await response.json();
          console.log('Draft order API response:', result);
          
          if (result.success && result.draftOrder && result.draftOrder.invoiceUrl) {
            console.log('Success! Redirecting to invoice:', result.draftOrder.invoiceUrl);
            window.location.href = result.draftOrder.invoiceUrl;
            return false; // Prevent any further form submission
          } else {
            console.error('No invoice URL in response:', result);
            throw new Error('No invoice URL received: ' + JSON.stringify(result));
          }
          
        } catch (error) {
          console.error('Draft order creation failed:', error);
          // Restore button
          btnText.innerHTML = originalText;
          checkoutBtn.disabled = false;
          
          // Show specific error message based on error type
          let errorMessage = 'Något blev fel, försök igen senare.';
          
          try {
            // Try to parse error response to get specific message
            if (error.message && error.message.includes('No invoice URL received:')) {
              const responseStr = error.message.replace('No invoice URL received: ', '');
              const responseObj = JSON.parse(responseStr);
              if (responseObj.error) {
                errorMessage = responseObj.error;
              }
            }
          } catch (parseError) {
            console.log('Could not parse specific error message, using default');
          }
          
          alert(errorMessage);
        }
      } else {
        console.log('No customer logged in, allowing normal checkout');
        console.log('Customer object was:', window.customer);
        // Let normal checkout proceed for guests
        // Don't prevent default here - let the form submit normally
      }
    }
  } else {
    console.error('Checkout button not found! Selector: button[name="checkout"][form="cart"]');
  }
});

// Backup initialization on window load in case DOMContentLoaded was too early
window.addEventListener('load', () => {
  console.log('Window load - backup checkout interception setup');
  
  // Only run if the checkout button wasn't already found
  const existingBtn = document.querySelector('button[name="checkout"][form="cart"]');
  if (existingBtn && !existingBtn.hasAttribute('data-checkout-intercepted')) {
    console.log('Setting up backup checkout interception');
    existingBtn.setAttribute('data-checkout-intercepted', 'true');
    
    existingBtn.addEventListener('click', async (e) => {
      console.log('Backup checkout button click event fired');
      if (window.customer?.id) {
        e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation();
        console.log('Backup interception successful');
        window.location.href = '/checkout'; // Fallback for now
      }
    });
  }
});
</script>
{% endif %}
<!-- END: Dynamic pricing -->
</div>

{% schema %}
{
  "name": "t:sections.main-cart.name",
  "settings": [
    {
      "type": "header",
      "content": "t:general.padding.section_heading.content"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 2,
      "unit": "px",
      "label": "t:general.padding.top.label",
      "default": 60
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 2,
      "unit": "px",
      "label": "t:general.padding.bottom.label",
      "default": 60
    }
  ],
  "blocks": [
    {
      "type": "@app"
    },
    {
      "type": "free_shipping_goal",
      "name": "t:sections.main-cart.blocks.free_shipping_goal.name",
      "limit": 1,
      "settings": [
        {
          "type": "paragraph",
          "content": "t:settings_schema.cart.settings.free_shipping_minimum_amount.info"
        }
      ]
    },
    {
      "type": "subtotal",
      "name": "t:sections.main-cart.blocks.subtotal.name",
      "limit": 1
    },
    {
      "type": "buttons",
      "name": "t:sections.main-cart.blocks.buttons.name",
      "limit": 1
    },
    {
      "type": "cart_note",
      "name": "t:sections.main-cart.blocks.cart_note.name",
      "limit": 1
    },
    {
      "type": "cart_shipping_rate",
      "name": "t:sections.main-cart.blocks.cart_shipping_rate.name",
      "limit": 1
    }
  ]
}
{% endschema %}
