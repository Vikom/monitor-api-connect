{%- if request.page_type != 'cart' and settings.cart_type == 'drawer' -%}
  {%- if request.page_type == 'cart' -%}
    {{ 'cart.css' | asset_url | stylesheet_tag }}
  {%- else -%}
    <link
      rel="stylesheet"
      href="{{ 'cart.css' | asset_url }}"
      media="print"
      fetchpriority="low"
      onload="this.media='all'"
    >
  {%- endif -%}
  
  <script src="{{ 'cart.js' | asset_url }}" defer="defer"></script>
  {%- if linklists['gift-wrapping'].links != blank and linklists['gift-wrapping'].links.first.type == 'product_link' -%}
    <script src="{{ 'gift-wrapping.js' | asset_url }}" defer="defer"></script>
  {%- endif -%}

  <cart-drawer
    id="CartDrawer"
    class="drawer cart-drawer drawer--right"
    data-section-id="{{ section.id }}"
    shopify-design-mode
    hidden
  >
    <div class="fixed-overlay" aria-controls="CartDrawer"></div>
    <div class="drawer__inner">
      <div id="CartDrawer-{{ section.id }}" class="drawer__content flex flex-col h-full w-full">
        <div class="drawer__header">
          {%- if section.settings.cart_message != blank -%}
            <div class="cart-drawer__message color-{{ section.settings.cart_mess_color_scheme }} text-{{ section.settings.cart_message_alignment }}">
              {{ section.settings.cart_message }}
            </div>
          {%- endif -%}
          <div class="drawer__header-inner cart-drawer__header flex items-center justify-between gap-3">
            <h2 class="drawer__heading h3">
              <span>{{ 'general.cart.title' | t }}</span>
              <cart-count
                class="cart-count cart-count--blank"
                aria-label="{{ 'general.cart.cart_count' | t: count: cart.items.size | escape }}"
                {% if cart == empty %}
                  hidden
                {% endif %}
                data-type="blank"
              >
                (
                {%- if cart.items.size < 100 -%}
                  {{- cart.items.size -}}
                {%- else -%}
                  99+
                {%- endif -%}
                )
              </cart-count>
            </h2>
            <button
              class="drawer__close-btn z-1 static"
              aria-controls="CartDrawer"
              type="button"
              aria-label="{{ 'accessibility.close' | t }}"
            >
              {% render 'icon-close', size: 'large' %}
            </button>
          </div>
        </div>
        <div
          id="CartDrawerEmpty-{{ section.id }}"
          class="drawer__body flex-grow v-scrollable{% if cart != empty %} hidden{% endif %}"
        >
          <div class="cart-drawer__empty text-center flex flex-col gap-10">
            <div class="grid gap-3">
              <p class="h4">{{ 'sections.cart.empty' | t }}</p>
              {%- if settings.cart_empty_message != blank -%}
                <div class="rte text-subtext">{{ settings.cart_empty_message }}</div>
              {%- endif -%}
            </div>
            {%- if settings.collection_list != blank -%}
              <ul class="recommendation-collection f-grid" role="list">
                {%- for collection in settings.collection_list -%}
                  {%- liquid
                    assign collection_image = collection.featured_image
                    assign first_product_in_collection = collection.products[0]

                    if collection_image == blank
                      assign collection_image = first_product_in_collection.featured_image
                    endif

                    assign image_ratio = settings.collection_image_ratio
                    if image_ratio == 'adapt'
                      assign image_ratio = collection_image.aspect_ratio
                    endif
                  -%}
                  <li class="recommendation-collection-item flex-grow flex items-center">
                    <a href="{{ collection.url }}" class="w-full grid gap-4 hover-wrapper btn-hover-wrapper">
                      <div
                        class="recommendation-collection-item__image blocks-radius-sm media-wrapper"
                        style="--aspect-ratio: {{ image_ratio }};"
                      >
                        {%- if collection_image != blank -%}
                          {{-
                            collection_image
                            | image_url: width: collection_image.width
                            | image_tag:
                              loading: 'lazy',
                              widths: '180,360,540',
                              is: 'image-lazy',
                              alt: '',
                              class: 'hover-scale-up motion-reduce'
                          -}}
                        {%- else -%}
                          <div style="--aspect-ratio: 1;">
                            {{ 'product-1' | placeholder_svg_tag: 'placeholder-svg hover-scale-up' }}
                          </div>
                        {%- endif -%}
                      </div>
                      <div class="recommendation-collection-item__content flex items-center justify-between flex-grow">
                        <h3 class="recommendation-collection-item__title h6 font-body-bolder">
                          {{ collection.title | escape }}
                        </h3>
                        <button
                          class="btn btn--icon btn--icon-circle shrink-0"
                          aria-label="{{ collection.title | escape }}"
                        >
                          <span class="btn__text flex">
                            {%- render 'icon-caret-right', size: 'extra-small' -%}
                          </span>
                        </button>
                      </div>
                    </a>
                  </li>
                {%- endfor -%}
              </ul>
            {%- endif -%}
            <a class="btn btn--primary self-center" href="{{ routes.all_products_collection_url }}">
              <span class="btn__text">{{- 'general.cart.continue_shopping' | t -}}</span>
            </a>
          </div>
        </div>
        <div class="drawer__body flex-grow v-scrollable flex flex-col">
          {%- liquid
            if section.settings.show_free_shipping_goal and settings.free_shipping_minimum_amount != blank
              assign minimum_amount = settings.free_shipping_minimum_amount | remove: ' '
              render 'free-shipping-goal', minimum_amount: minimum_amount, classes: 'w-full'
            endif
          -%}
          <div
            id="CartDrawerBody-{{ section.id }}"
            class="flex flex-col gap-8 flex-grow{% if cart == empty %} hidden{% endif %}"
          >
            {%- liquid
              if linklists['gift-wrapping'].links != blank and linklists['gift-wrapping'].links.first.type == 'product_link'
                assign gift_wrapping = linklists['gift-wrapping'].links.first

                assign gift_wrap_id = gift_wrapping.object.variants.first.id
                assign gift_wraps_in_cart = 0
                for item in cart.items
                  if item.id == gift_wrap_id
                    assign gift_wraps_in_cart = item.quantity
                    break
                  endif
                endfor
                assign items_in_cart = cart.item_count | minus: gift_wraps_in_cart
              endif
            -%}
            <cart-items class="flex-grow">
              <ul role="list" class="flex flex-col gap-8">
                {%- for item in cart.items -%}
                  {%- liquid
                    if item.variant.inventory_management != blank and item.variant.inventory_policy == 'deny'
                      assign item_max_quantity = item.variant.inventory_quantity
                    endif

                    assign is_gift_wrap_item = false
                    if gift_wrap_id != null and item.id == gift_wrap_id
                      assign is_gift_wrap_item = true
                    endif
                  -%}
                  {%- capture cart_item -%}
                  <li id="CartDrawer-Item-{{ item.index | plus: 1 }}" class="cart-item flex flex-col" data-variant-id="{{ item.variant_id }}" data-handle="{{ item.product.handle }}" data-quantity="{{ item.quantity }}" data-price="{{ item.original_price }}">
                    <div class="cart-item__product flex items-start gap-3">
                      {%- if item.image -%}
                        <a class="cart-item__media blocks-radius-sm media-wrapper" href="{{ item.url }}" tabindex="-1" aria-label="{{ item.title }}">
                          {{- item.image 
                            | image_url: width: item.image.width
                            | image_tag:
                            loading: 'lazy',
                            widths: '80, 100, 160, 200',
                            sizes: '(max-width: 767px) 80px, 100px',
                            is: 'image-lazy' 
                          -}}
                        </a>
                      {%- else -%}
                        <a class="cart-item__media blocks-radius-sm media-wrapper" href="{{ item.url }}" tabindex="-1" aria-label="{{ item.title }}">
                          <img 
                            src="https://cdn.shopify.com/s/files/1/0908/2804/6670/files/square-bildkommer_41fdbdd7-eb36-462b-b879-5ae871f39315.jpg?v=1754924924" 
                            alt="Default product image"
                            width="100"
                            height="100"
                            class="w-full h-auto"
                            loading="lazy"
                          >
                        </a>
                      {%- endif -%}
                      <div class="cart-item__details flex-grow flex flex-col gap-3">
                        <div class="flex justify-between gap-3">
                          <div class="grid flex-1">
                            <div class="block"><a href="{{ item.url }}" class="cart-item__title text-pcard-title reversed-link">{{- item.product.title | escape -}}</a></div>
                            {%- if item.product.has_only_default_variant == false or item.properties.size != 0 or item.selling_plan_allocation != null -%}
                              <div class="cart-item__options">
                                {%- if item.product.has_only_default_variant == false -%}
                                  {%- assign last_index = item.options_with_values.size | minus: 1 -%}
                                  {%- for option in item.options_with_values -%}
                                    <span class="cart-item__option-value text-sm text-subtext">
                                      {{ option.value }}{% unless forloop.index0 == last_index %}, {% endunless %}
                                    </span>
                                  {%- endfor -%}
                                {%- endif -%}
        
                                {%- for property in item.properties -%}
                                  {%- assign property_first_char = property.first | slice: 0 -%}
                                  {%- if property.last != blank and property_first_char != '_' -%}
                                    <div class="flex gap-1 text-sm text-subtext">
                                      <dt>{{ property.first }}:&nbsp;</dt>
                                      <dd>
                                        {%- if property.last contains '/uploads/' -%}
                                          <a href="{{ property.last }}" class="link" target="_blank" aria-describedby="a11y-new-window-message">
                                            {{- property.last | split: '/' | last -}}
                                          </a>
                                        {%- else -%}
                                          {{- property.last -}}
                                        {%- endif -%}
                                      </dd>
                                    </div>
                                  {%- endif -%}
                                {%- endfor -%}
                                {%- if item.selling_plan_allocation != null -%}
                                  <p class="text-sm text-subtext">{{ item.selling_plan_allocation.selling_plan.name }}</p>
                                {%- endif -%}
                              </div>
                            {%- endif -%}
                          </div>
                          <a id="Loader-{{ section.id }}-{{ item.index | plus: 1 }}"{% unless is_gift_wrap_item %} is="cart-remove-item"{% else %} is="gift-wrap-remove-item"{% endunless %} class="cart-item__remove flex items-center justify-center relative btn-remove" href="{{ item.url_to_remove }}" data-index="{{ item.index | plus: 1 }}" aria-label="{{ 'sections.cart.remove_title' | t: title: item.title }}">
                            <span class="flex">
                              {%- render 'icon-close', size: 'small' -%}
                            </span>
                            {% render 'loading-spinner' %}
                          </a>
                        </div>
                        <div class="cart-item__action cart-item__action flex items-center justify-between gap-3">
                          {%- liquid 
                            assign has_qty_rules = false
                            if item.variant.quantity_rule.increment > 1 or item.variant.quantity_rule.min > 1 or item.variant.quantity_rule.max != null
                              assign has_qty_rules = true
                            endif
  
                            assign has_vol_pricing = false
                            if item.variant.quantity_price_breaks.size > 0
                              assign has_vol_pricing = true
                            endif
                          -%}

                          {%- if has_qty_rules or has_vol_pricing -%}
                            {%- capture qty_rules_vol_pricing -%}
                              {%- if has_qty_rules -%}
                                <div
                                  class="quantity__rules text-sm"
                                >
                                  {%- if item.variant.quantity_rule.increment > 1 -%}
                                    <span class="divider">
                                      {{-
                                        'products.product.quantity.multiples_of'
                                        | t: quantity: item.variant.quantity_rule.increment
                                      -}}
                                    </span>
                                  {%- endif -%}
                                  {%- if item.variant.quantity_rule.min > 1 -%}
                                    <span class="divider">
                                      {{-
                                        'products.product.quantity.minimum_of'
                                        | t: quantity: item.variant.quantity_rule.min
                                      -}}
                                    </span>
                                  {%- endif -%}
                                  {%- if item.variant.quantity_rule.max != null -%}
                                    <span class="divider">
                                      {{-
                                        'products.product.quantity.maximum_of'
                                        | t: quantity: item.variant.quantity_rule.max
                                      -}}
                                    </span>
                                  {%- endif -%}
                                </div>
                              {%- endif -%}
                              {%- if has_vol_pricing -%}
                                {{ 'component-volume-pricing.css' | asset_url | stylesheet_tag }}
                                <volume-pricing class="block parent-display blocks-radius-md" id="Volume-{{ section.id }}">
                                  <span class="caption block">{{ 'products.product.volume_pricing.title' | t }}</span>
                                  <ul class="list-unstyled">
                                    <li class="blocks-radius-md">
                                      <span>{{ item.variant.quantity_rule.min }}+</span>
                                      {%- liquid 
                                        if settings.currency_code_enabled
                                          assign price = item.variant.price | money_with_currency
                                        else
                                          assign price = item.variant.price | money
                                        endif
                                      -%}
                                      <span> {{ 'sections.quick_order_list.each' | t: money: price }}</span>
                                    </li>
                                    {%- for price_break in item.variant.quantity_price_breaks -%}
                                      <li class="blocks-radius-md">
                                        <span>
                                          {{- price_break.minimum_quantity -}}
                                          <span aria-hidden="true">+</span>
                                        </span>
                                        {%- liquid 
                                          if settings.currency_code_enabled
                                            assign price_break_price = price_break.price | money_with_currency
                                          else
                                            assign price_break_price = price_break.price | money
                                          endif
                                        -%}
                                        <span>{{ 'sections.quick_order_list.each' | t: money: price_break_price }}</span>
                                      </li>
                                    {%- endfor -%}
                                  </ul>
                                </volume-pricing>
                              {%- endif -%}
                            {%- endcapture -%}
                          {%- endif -%}
                          <div class="flex items-center gap-2">
                            {%- unless is_gift_wrap_item -%}
                              {%- liquid
                                # Get the standard unit from the variant's metafields (same logic as buy-buttons)
                                assign standard_unit = blank
                                assign allows_decimal = false
                                assign quantity_step = 1
                                assign quantity_unit = 'items'
                                
                                # Access the standard_unit metafield directly from the variant
                                assign standard_unit_metafield = item.variant.metafields.custom.standard_unit
                                if standard_unit_metafield
                                  assign standard_unit = standard_unit_metafield.value
                                endif
                                
                                # Determine if decimals are allowed based on unit
                                # Units that require whole numbers: "st", "rle", "pkt", "pås", "Sk", "krt", "frp"
                                assign whole_number_units = 'st,rle,pkt,pås,Sk,krt,frp' | split: ','
                                assign allows_decimal = true
                                
                                for unit in whole_number_units
                                  if standard_unit == unit
                                    assign allows_decimal = false
                                    break
                                  endif
                                endfor
                                
                                # Set step and unit display
                                if allows_decimal
                                  assign quantity_step = 0.05
                                  assign min_quantity = 1.00
                                  if standard_unit != blank
                                    assign quantity_unit = standard_unit
                                  else
                                    assign quantity_unit = 'units'
                                  endif
                                else
                                  assign quantity_step = 1
                                  assign min_quantity = 1
                                  if standard_unit != blank
                                    assign quantity_unit = standard_unit
                                  else
                                    assign quantity_unit = 'items'
                                  endif
                                endif
                              -%}
                              
                              <quantity-input class="cart-quantity quantity self-end">
                                <label class="visually-hidden" for="Quantity-{{ section.id }}-{{ item.index | plus: 1 }}">{{ 'products.product.quantity.label' | t }}</label>
                                <button type="button" name="minus" class="quantity__button" aria-label="{{ 'products.product.quantity.decrease' | t: product: item.product.title | escape }}">
                                  <svg width="16" height="16" viewBox="0 0 15 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M2.6875 7H12.3125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                  </svg>
                                </button>
                                <input class="quantity__input"
                                  {% if allows_decimal %}type="text"{% else %}type="number"{% endif %}
                                  {% if allows_decimal %}
                                    name="quantity_decimal_{{ item.variant_id }}"
                                    data-cart-updates-name="updates[]"
                                    data-cart-updates-index="{{ item.index }}"
                                    value="{{ item.quantity | divided_by: 20.0 | round: 2 | replace: '.', ',' }}"
                                  {% else %}
                                    name="updates[]"
                                    value="{{ item.quantity }}"
                                  {% endif %}
                                  id="Quantity-{{ section.id }}-{{ item.index | plus: 1 }}"
                                  aria-label="{{ 'products.product.quantity.input_label' | t: product: item.product.title | escape }}"
                                  {% if allows_decimal %}
                                    step="0,05"
                                    data-min="0,05"
                                    min="0,05"
                                    data-decimal="true"
                                    data-unit="{{ quantity_unit }}"
                                  {% else %}
                                    step="{{ item.variant.quantity_rule.increment }}"
                                    data-min="{{ item.variant.quantity_rule.min }}"
                                    min="{{ item.variant.quantity_rule.min }}"
                                    data-decimal="false"
                                  {% endif %}
                                  {% unless allows_decimal %}size="2"{% endunless %}
                                  inputmode="numeric"
                                  autocomplete="off"
                                  data-index="{{ item.index | plus: 1 }}"
                                  data-quantity-variant-id="{{ item.variant.id }}"
                                  data-cart-quantity="{{ cart | item_count_for_variant: item.variant.id }}"
                                  min="0"
                                  {% if item.variant.quantity_rule.max != null %}
                                    max="{{ item.variant.quantity_rule.max }}"
                                  {% endif %}
                                />
                                <button type="button" name="plus" class="quantity__button" aria-label="{{ 'products.product.quantity.increase' | t: product: item.product.title | escape }}">
                                  <svg width="16" height="16" viewBox="0 0 15 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M2.6875 7H12.3125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M7.5 2.1875V11.8125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                  </svg>
                                </button>
                              </quantity-input>
                              
                              {% if quantity_unit != blank and quantity_unit != 'items' %}
                                <span class="quantity-unit">{{ quantity_unit }}</span>
                              {% endif %}
                            {%- else -%}
                              <div class="cart-quantity quantity cart-quantity-gift-wrap self-end">
                                <label class="visually-hidden" for="Quantity-{{ section.id }}-{{ item.index | plus: 1 }}"></label>
                                <button type="button" name="minus" class="quantity__button hidden" disabled aria-label="{{ 'products.product.quantity.decrease' | t: product: item.product.title | escape }}">
                                  <svg width="16" height="16" viewBox="0 0 15 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M2.6875 7H12.3125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                  </svg>
                                </button>
                                <input 
                                  class="quantity__input"
                                  disabled
                                  type="text"
                                  name="updates[]"
                                  value="{{ item.quantity }}"
                                  id="Quantity-{{ section.id }}-{{ item.index | plus: 1 }}"
                                  inputmode="numeric"
                                  autocomplete="off"
                                  aria-label="{{ 'products.product.quantity.input_label' | t: product: item.product.title | escape }}"
                                  data-index="{{ item.index | plus: 1 }}"
                                  data-quantity-variant-id="{{ item.variant.id }}"
                                  data-cart-quantity="{{ cart | item_count_for_variant: item.variant.id }}"
                                  size="2"
                                  min="0"
                                  data-min="{{ item.variant.quantity_rule.min }}"
                                  {% if item.variant.quantity_rule.max != null %}
                                    max="{{ item.variant.quantity_rule.max }}"
                                  {% endif %}
                                  step="{{ item.variant.quantity_rule.increment }}"
                                />
                                <button type="button" name="plus" disabled class="quantity__button hidden" aria-label="{{ 'products.product.quantity.increase' | t: product: item.product.title | escape }}">
                                  <svg width="16" height="16" viewBox="0 0 15 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M2.6875 7H12.3125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M7.5 2.1875V11.8125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                  </svg>
                                </button>
                              </div>
                            {%- endunless -%}
                            {% if has_qty_rules or has_vol_pricing %}
                              <button class="btn btn--plain volume-pricing-toggle" aria-controls="VolumnPricing-{{ section.id }}-{{ item.key }}">
                                <svg class="icon icon-info icon--medium" viewBox="0 0 25 24" stroke="currentColor" fill="none" xmlns="http://www.w3.org/2000/svg">
                                  <path stroke-linecap="round" stroke-linejoin="round" d="M12.5 16V11M13 8C13 8.27614 12.7761 8.5 12.5 8.5C12.2239 8.5 12 8.27614 12 8M13 8C13 7.72386 12.7761 7.5 12.5 7.5C12.2239 7.5 12 7.72386 12 8M13 8H12M22.5 12C22.5 17.5228 18.0228 22 12.5 22C6.97715 22 2.5 17.5228 2.5 12C2.5 6.47715 6.97715 2 12.5 2C18.0228 2 22.5 6.47715 22.5 12Z"></path>
                                </svg>
                              </button>
                              <modal-component class="drawer cart-addons-drawer drawer--bottom" id="VolumnPricing-{{ section.id }}-{{ item.key }}" hidden>
                                <div class="fixed-overlay absolute" aria-controls="VolumnPricing-{{ section.id }}-{{ item.key }}"></div>
                                <div class="drawer__inner v-scrollable">
                                  <button aria-controls="VolumnPricing-{{ section.id }}-{{ item.key }}" aria-label="{{ 'accessibility.close' | t }}" class="drawer__close-btn z-1">
                                    {%- render 'icon-close' -%}
                                  </button>
                                  <div class="drawer__content cart-addons-drawer__content grid gap-5">
                                    <div>
                                      <h4>{{ item.product.title | escape }}</h4>
                                      {% if item.product.has_only_default_variant == false %}
                                        <div class="flex gap-1">
                                          {% for option in item.options_with_values %}
                                            <span class="text-sm text-subtext">{{ option.value }}{% unless forloop.index0 == last_index %},{% endunless %}</span>
                                          {% endfor %}
                                        </div>
                                      {% endif %}
                                    </div>
                                    <div class="grid gap-3">
                                      {{ qty_rules_vol_pricing }}
                                    </div>
                                  </div>
                                </div>
                              </modal-component>
                            {% endif %}
                          </div>

                          <div class="cart-item__prices text-right flex flex-col gap-2">
                            {%- if item.line_level_discount_allocations != blank -%}
                              <ul class="cart-item__discounts discounts list-unstyled flex justify-end flex-wrap gap-1" role="list" aria-label="{{ 'customer.order.discount' | t }}">
                                {%- for discount_allocation in item.line_level_discount_allocations -%}
                                  <li class="discount text-sm-extra font-body-bold inline-flex items-center">
                                    {% render 'icon-discount' %}
                                    <span>{{ discount_allocation.discount_application.title }}</span>
                                  </li>
                                {%- endfor -%}
                              </ul>
                            {%- endif -%}
                            <div>
                              <div class="price font-body-bolder{% if item.original_price != item.final_price %} price--on-sale{% endif %}">
                                {%- liquid
                                  assign money_price = item.original_price | money
                                  if settings.currency_code_enabled
                                    assign money_price = item.original_price | money_with_currency
                                  endif
                                -%}
                                {%- if item.original_price != item.final_price -%}
                                  <span class="visually-hidden">{{ 'products.product.price.regular_price' | t }}</span>
                                  <s class="font-body text-sm text-subtext">{{ money_price }}</s>
                                  <span class="visually-hidden">{{ 'products.product.price.sale_price' | t }}</span>
                                  <span class="price__regular">
                                    {%- liquid 
                                      if settings.currency_code_enabled
                                        echo item.final_price | money_with_currency
                                      else
                                        echo item.final_price | money
                                      endif  
                                    -%}
                                  </span>
                                {%- else -%}
                                  {{- money_price -}}
                                {%- endif -%}
                              </div>
                              {%- if item.variant.available and item.unit_price_measurement -%}
                                <div>
                                <span class="visually-hidden">{{ 'products.product.price.unit_price' | t }}</span>
                                <span class="unit-price flex items-center text-sm font-body text-subtext">
                                  {%- liquid
                                    capture unit_price_base_unit
                                      if item.variant.unit_price_measurement
                                        if item.variant.unit_price_measurement.reference_value != 1
                                          echo item.variant.unit_price_measurement.reference_value
                                        endif
                                        echo item.variant.unit_price_measurement.reference_unit
                                      endif
                                    endcapture
                                  -%}
                                  ({{ item.variant.unit_price | money }}
                                  <span aria-hidden="true">/</span>
                                  <span class="visually-hidden">&nbsp;{{ 'accessibility.unit_price_separator' | t }}&nbsp;</span>
                                  {{ unit_price_base_unit }})
                                  </span>
                                </div>
                              {%- endif -%}
                            </div>
                          </div>
                        </div>
                      </div>
                      
                    </div>
                    {% liquid
                      assign collections = ''
                      for collection in item.product.collections
                        assign collections = collections | append: collection.id | append: ','
                      endfor
                    %}
                    <foxkit-incart-upsell
                      data-collections="{{ collections | remove_last: ',' }}"
                      data-product-title="{{ item.product.title }}"
                      data-product-id="{{ item.product_id }}"
                    ></foxkit-incart-upsell>
                  </li>
                {%- endcapture -%}

                  {%- liquid
                    unless is_gift_wrap_item
                      echo cart_item
                    else
                      assign cart_gift_wrap_item = cart_item
                    endunless
                  -%}
                {%- endfor -%}
                {%- liquid
                  if cart_gift_wrap_item
                    echo cart_gift_wrap_item
                  endif
                -%}
              </ul>
            </cart-items>

            {%- if section.settings.enable_cart_recommendations and cart != empty -%}
              {%- liquid
                assign first_product_id = cart.items.first.product_id
                if cart_gift_wrap_item
                  if first_product_id == gift_wrapping.object.id
                    if cart.items.size > 1
                      assign first_product_id = cart.items[1].product_id
                    endif
                  endif
                endif
              -%}
              {%- comment -%}
              {%- render 'cart-drawer-products-recommendation',
                section_id: section.id,
                product_id: first_product_id,
                heading: section.settings.cart_recommendations_heading,
                limit: section.settings.cart_recommendations_limit,
                products_recommendations: section.settings.cart_recommendations_products
              -%}
              {%- endcomment -%}
            {%- endif -%}
          </div>
        </div>
        <div
          id="CartDrawerFooter-{{ section.id }}"
          class="drawer__footer cart-drawer__footer grid gap-4{% if cart == empty %} hidden{% endif %}"
        >
          <div class="drawer__footer-head grid gap-4">
            {%- render 'gift-wrapping',
              section_id: section.id,
              gift_wrapping: gift_wrapping,
              gift_wrap_id: gift_wrap_id,
              gift_wraps_in_cart: gift_wraps_in_cart,
              items_in_cart: items_in_cart,
              class: 'text-sm'
            -%}
            {%- if section.settings.show_cart_note or section.settings.show_shipping_rates_calculator -%}
              <div class="flex gap-2 cart-drawer__addons">
                {%- if section.settings.show_cart_note -%}
                  <button
                    type="button"
                    class="btn btn--secondary btn--small font-body flex gap-2 items-center justify-center"
                    aria-controls="CartNote-{{ section.id }}"
                    aria-expanded="false"
                  >
                    <span class="btn__text flex gap-1 items-center">
                      {{ 'general.cart.note.title' | t }}
                      {%- render 'icon-caret-right', size: 'extra-small' -%}
                    </span>
                  </button>
                {%- endif -%}
                <button
                  type="button"
                  class="btn btn--secondary btn--small font-body flex gap-2 items-center justify-center"
                  aria-controls="OrderMark-{{ section.id }}"
                  aria-expanded="false"
                >
                  <span class="btn__text flex gap-1 items-center">
                    Ordermärkning
                    {%- render 'icon-caret-right', size: 'extra-small' -%}
                  </span>
                </button>
                {%- if section.settings.show_shipping_rates_calculator -%}
                  <button
                    type="button"
                    class="btn btn--secondary btn--small font-body flex gap-2 items-center justify-center"
                    aria-controls="ShippingCalculator-{{ section.id }}"
                    aria-expanded="false"
                  >
                    <span class="btn__text flex gap-1 items-center">
                      {{ 'general.cart.shipping_calculator.title' | t }}
                      {%- render 'icon-caret-right', size: 'extra-small' -%}
                    </span>
                  </button>
                {%- endif -%}

                {%- if section.settings.show_cart_note -%}
                  <modal-component
                    id="CartNote-{{ section.id }}"
                    class="drawer cart-addons-drawer drawer--bottom"
                    hidden
                  >
                    <div class="fixed-overlay absolute" aria-controls="CartNote-{{ section.id }}"></div>
                    <div class="drawer__inner">
                      <button
                        aria-controls="CartNote-{{ section.id }}"
                        class="drawer__close-btn z-1"
                        aria-label="{{ 'accessibility.close' | t }}"
                      >
                        {%- render 'icon-close' -%}
                      </button>
                      <div class="drawer__content cart-addons-drawer__content grid gap-5">
                        <h4>{{ 'general.cart.note.title' | t }}</h4>
                        <cart-note class="flex flex-col items-start gap-5">
                          <div class="form-field w-full">
                            <textarea
                              name="note"
                              class="form-control form-control--textarea"
                              rows="5"
                              placeholder="{{ 'general.cart.note.caption' | t }}"
                              id="CartNoteForm-{{ section.id }}"
                            >{{ cart.note }}</textarea>
                            <label class="visually-hidden" for="CartNoteForm-{{ section.id }}">
                              {{- 'general.cart.note.title' | t -}}
                            </label>
                          </div>
                          <button
                            class="btn btn--primary"
                            type="button"
                            aria-controls="CartNote-{{ section.id }}"
                            aria-expanded="false"
                          >
                            <span class="btn__text">{{ 'general.cart.note.button' | t }}</span>
                          </button>
                        </cart-note>
                      </div>
                    </div>
                  </modal-component>
                {%- endif -%}
                <modal-component
                  id="OrderMark-{{ section.id }}"
                  class="drawer cart-addons-drawer drawer--bottom"
                  hidden
                >
                  <div class="fixed-overlay absolute" aria-controls="OrderMark-{{ section.id }}"></div>
                  <div class="drawer__inner cart-addons-drawer__inner flex flex-col w-full h-full">
                    <button
                      aria-controls="OrderMark-{{ section.id }}"
                      aria-label="{{ 'accessibility.close' | t }}"
                      class="drawer__close-btn z-1"
                    >
                      {%- render 'icon-close' -%}
                    </button>
                    <div class="drawer__content cart-addons-drawer__content grid gap-5">
                      <h4>Ordermärkning</h4>
                      <div class="flex flex-col items-start gap-5">
                        <div class="form-field w-full">
                          <textarea
                            name="order_mark"
                            class="form-control form-control--textarea"
                            rows="3"
                            placeholder="Din ordermärkning"
                            id="CartOrderMarkForm-{{ section.id }}"
                          >{{ cart.attributes['order_mark'] }}</textarea>
                          <label class="visually-hidden" for="CartOrderMarkForm-{{ section.id }}">
                            Ordermärkning
                          </label>
                        </div>
                        <button
                          class="btn btn--primary"
                          type="button"
                          aria-controls="OrderMark-{{ section.id }}"
                          aria-expanded="false"
                          is="order-mark-save"
                        >
                          <span class="btn__text">{{ 'general.cart.note.button' | t }}</span>
                        </button>
                      </div>
                    </div>
                  </div>
                </modal-component>
                {%- if section.settings.show_shipping_rates_calculator -%}
                  <calculate-shipping
                    id="ShippingCalculator-{{ section.id }}"
                    class="drawer cart-addons-drawer drawer--bottom"
                    hidden
                    data-show="fasle"
                  >
                    <div class="fixed-overlay absolute" aria-controls="ShippingCalculator-{{ section.id }}"></div>
                    <div class="drawer__inner cart-addons-drawer__inner flex flex-col w-full h-full">
                      <button
                        aria-controls="ShippingCalculator-{{ section.id }}"
                        aria-label="{{ 'accessibility.close' | t }}"
                        class="drawer__close-btn z-1"
                      >
                        {%- render 'icon-close' -%}
                      </button>
                      <div class="drawer__content v-scrollable cart-addons-drawer__content flex flex-col gap-4">
                        <h4>{{ 'general.cart.shipping_calculator.title' | t }}</h4>
                        <form
                          class="grid gap-4"
                          action="{{ routes.cart_url }}"
                          method="POST"
                          novalidate
                          is="shipping-calculator"
                        >
                          <country-province
                            class="grid gap-4"
                            {% if shop.customer_accounts_enabled and customer %}
                              data-country="{{ customer.default_address.country }}"
                              {%- if customer.default_address.province != '' %}
                                data-province="{{ customer.default_address.province }}"
                              {%- endif -%}
                            {% endif %}
                          >
                            <div class="form-field reset-spacing">
                              <label class="form-label" for="ShippingCalculatorCountry-{{ section.id }}">
                                {{- 'customer.addresses.country' | t -}}
                              </label>
                              <div class="select">
                                <select
                                  name="address[country]"
                                  class="form-control form-control--select"
                                  autocomplete="country"
                                  id="ShippingCalculatorCountry-{{ section.id }}"
                                >
                                  <template>{{- all_country_option_tags -}}</template>
                                </select>
                                {%- render 'icon-caret-down', size: '2xs' -%}
                              </div>
                            </div>
                            <div class="form-field reset-spacing" hidden>
                              <label class="form-label" for="ShippingCalculatorProvince-{{ section.id }}">
                                {{- 'customer.addresses.province' | t -}}
                              </label>
                              <div class="select">
                                <select
                                  name="address[province]"
                                  class="form-control form-control--select"
                                  autocomplete="address-level1"
                                  id="ShippingCalculatorProvince-{{ section.id }}"
                                ></select>
                                {%- render 'icon-caret-down', size: '2xs' -%}
                              </div>
                            </div>
                          </country-province>
                          <div class="form-field">
                            <label class="form-label" for="ShippingCalculatorZip-{{ section.id }}">
                              {{- 'customer.addresses.zip' | t -}}
                            </label>
                            <input
                              name="address[zip]"
                              class="form-control form-control--input"
                              type="text"
                              autocapitalize="characters"
                              autocomplete="postal-code"
                              placeholder=" "
                              id="ShippingCalculatorZip-{{ section.id }}"
                              {% if shop.customer_accounts_enabled and customer %}
                                value="{{ customer.default_address.zip }}"
                              {% endif %}
                            >
                          </div>
                          <div class="">
                            <button class="btn btn--primary" type="submit">
                              <span class="btn__text">{{ 'general.cart.shipping_calculator.button' | t }}</span>
                              {%- render 'loading-spinner' -%}
                            </button>
                          </div>
                          <div class="grid gap-3"></div>
                        </form>
                      </div>
                    </div>
                  </calculate-shipping>
                {%- endif -%}
              </div>
            {%- endif -%}
          </div>
          <div class="drawer__footer-body">
            <div class="grid gap-5">
              <div class="grid gap-1">
                {%- if cart.cart_level_discount_applications.size > 0 -%}
                  <ul
                    class="discounts list-unstyled flex gap-1"
                    role="list"
                    aria-label="{{ 'customer.order.discount' | t }}"
                  >
                    {%- for discount in cart.cart_level_discount_applications -%}
                      <li class="discount text-sm-extra font-body-bold flex items-center">
                        {% render 'icon-discount' %}
                        <span>{{- discount.title -}}</span>
                        <span class="font-body-bold">(-{{ discount.total_allocated_amount | money }})</span>
                      </li>
                    {%- endfor -%}
                  </ul>
                {%- endif -%}
                <div class="totals flex justify-between h5 items-center">
                  <span class="totals__subtotal">
                    {{- 'sections.cart.estimated_total' | t -}}
                  </span>
                  <span class="totals__subtotal-value">
                    {{- cart.total_price | money_with_currency -}}
                  </span>
                </div>
                <div class="tax-note text-sm-extra">
                  {%- liquid
                    if cart.taxes_included and shop.shipping_policy.body != blank
                      echo 'sections.cart.taxes_included_and_shipping_policy_html' | t: link: shop.shipping_policy.url
                    elsif cart.taxes_included
                      echo 'sections.cart.taxes_included_but_shipping_at_checkout' | t
                    elsif shop.shipping_policy.body != blank
                      echo 'sections.cart.taxes_and_shipping_policy_at_checkout_html' | t: link: shop.shipping_policy.url
                    else
                      echo 'sections.cart.taxes_and_shipping_at_checkout' | t
                    endif
                  -%}
                </div>
              </div>
              <form action="{{ routes.cart_url }}" method="POST" novalidate class="drawer__footer-buttons flex gap-2">
                <a href="{{ routes.cart_url }}" class="btn btn--secondary">
                  <span class="btn__text">{{ 'general.cart.view_empty_cart' | t }}</span>
                </a>
                <button class="btn btn--primary flex-grow" type="submit" name="checkout">
                  <span class="btn__text">{{ 'sections.cart.checkout' | t }}</span>
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
<!-- START: Dynamic Pricing Checkout for Cart Drawer -->
<style>
/* Hide cart prices initially until dynamic pricing loads (or keep hidden for non-logged-in customers) */
.cart-drawer .cart-item__prices .price,
.cart-drawer .totals__subtotal-value {
  visibility: hidden;
}

/* Show prices for f-price--loading elements when they're made visible via JS */
.cart-drawer .price.f-price--loading {
  visibility: hidden !important;
}

</style>
{% if customer %}
<script>
// Set up customer object first
window.customer = {
  id: {{ customer.id | json }},
  email: {{ customer.email | json }},
  first_name: {{ customer.first_name | json }},
  last_name: {{ customer.last_name | json }}
};

// Pre-populate cart item metafields using Liquid (same approach as product page!)
window.cartItemsMetafields = {
  {% for item in cart.items %}
    "{{ item.variant_id }}": {
      monitorId: "{{ item.variant.metafields.custom.monitor_id }}",
      customerMonitorId: "{{ customer.metafields.custom.monitor_id }}",
      customerDiscountCategory: "{{ customer.metafields.custom.discount_category }}",
      customerPriceListId: "{{ customer.metafields.custom.pricelist_id }}",
      standardUnit: "{{ item.variant.metafields.custom.standard_unit }}",
      {% assign is_outlet = false %}
      {% for collection in item.product.collections %}
        {% if collection.handle == 'outlet' %}
          {% assign is_outlet = true %}
          {% break %}
        {% endif %}
      {% endfor %}
      isOutletProduct: {{ is_outlet }}
    }{% unless forloop.last %},{% endunless %}
  {% endfor %}
};

// Enhanced checkout for dynamic pricing - Cart Drawer
document.addEventListener('DOMContentLoaded', () => {
  // Helper function to format price with Swedish comma decimal separator
  function formatPrice(price) {
    return price.toFixed(2).replace('.', ',');
  }
  
  // Order mark persistence functionality
  function setupOrderMarkPersistence() {
    const orderMarkButton = document.querySelector('button[is="order-mark-save"]');
    if (orderMarkButton) {
      orderMarkButton.addEventListener('click', async () => {
        const orderMarkTextarea = document.querySelector('textarea[name="order_mark"]');
        if (!orderMarkTextarea) return;
        
        const orderMarkValue = orderMarkTextarea.value.trim();
        
        try {
          // Save order mark to cart attributes
          const response = await fetch('/cart/update.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              attributes: {
                'order_mark': orderMarkValue
              }
            })
          });
          
          if (response.ok) {
            // Close the modal
            const modal = document.querySelector('#OrderMark-{{ section.id }}');
            if (modal) {
              modal.setAttribute('hidden', '');
            }
            
            console.log('Order mark saved to cart:', orderMarkValue);
          } else {
            console.error('Failed to save order mark to cart');
          }
        } catch (error) {
          console.error('Error saving order mark:', error);
        }
      });
    }
  }
  
  // Initialize order mark persistence
  setupOrderMarkPersistence();
  
  // Cache to prevent multiple API calls for the same variant
  const priceCache = new Map();
  
  // Debounce mechanism to prevent multiple simultaneous price updates
  let priceUpdateInProgress = false;
  
  // Helper function to set loading state for cart prices
  function setCartPricesLoading() {
    if (!window.customer?.id) return;
    
    // Simply hide all cart item price elements until they load
    const cartItems = document.querySelectorAll('.cart-drawer li[data-variant-id]');
    cartItems.forEach(item => {
      const priceElement = item.querySelector('.cart-item__prices .price');
      if (priceElement) {
        priceElement.classList.add('f-price--loading');
        priceElement.style.visibility = 'hidden';
      }
    });
    
    // Hide cart total while loading
    const totalElement = document.querySelector('.totals__subtotal-value');
    if (totalElement) {
      totalElement.style.visibility = 'hidden';
    }
  }
  
  // Helper function to show prices after loading
  function showCartPrices() {
    const cartItems = document.querySelectorAll('.cart-drawer li[data-variant-id]');
    cartItems.forEach(item => {
      const priceElement = item.querySelector('.cart-item__prices .price');
      if (priceElement) {
        priceElement.classList.remove('f-price--loading');
        priceElement.style.visibility = 'visible';
      }
    });
    
    // Show cart total
    const totalElement = document.querySelector('.totals__subtotal-value');
    if (totalElement) {
      totalElement.style.visibility = 'visible';
    }
  }
  
  // Function to update cart prices
  async function updateCartPrices() {
    if (!window.customer?.id) {
      // For non-logged-in customers, hide all prices - no pricing available
      return;
    }
    
    // Prevent multiple simultaneous updates
    if (priceUpdateInProgress) {
      console.log('Price update already in progress, skipping...');
      return;
    }
    priceUpdateInProgress = true;
    
    // Set a timeout to reset the flag in case of unexpected errors
    const resetFlag = setTimeout(() => {
      priceUpdateInProgress = false;
      console.log('Price update flag reset by timeout');
    }, 10000); // 10 second timeout
    
    console.log('Updating cart drawer prices...');
    console.log('Cart metafields data:', window.cartItemsMetafields);
    
    // Set loading state first
    setCartPricesLoading();
    
    try {
      // Get cart items
      const cartResponse = await fetch('/cart.js');
      const cart = await cartResponse.json();
      let cartTotal = 0;
      
      // Update each cart item price
      for (const item of cart.items) {
        const variantId = `gid://shopify/ProductVariant/${item.variant_id}`;
        const customerId = `gid://shopify/Customer/${window.customer.id}`;
        const cacheKey = `${item.variant_id}-${window.customer.id}`;
        
        console.log(`Getting price for variant ${item.variant_id} (product: ${item.product_title})`);
        
        // Check cache first
        let priceData = priceCache.get(cacheKey);
        
        if (!priceData) {
          // Get metafields from pre-populated data (same as product page approach!)
          let itemMetafields = window.cartItemsMetafields?.[item.variant_id] || {};
          
          // If no pre-populated metafields and we're on a product page, try to get from product page context
          if (!itemMetafields.monitorId && window.variantMonitorIds && window.variantMonitorIds[item.variant_id]) {
            console.log(`Using product page metafields for variant ${item.variant_id}`);
            itemMetafields = {
              monitorId: window.variantMonitorIds[item.variant_id],
              customerMonitorId: window.customerMonitorId || null,
              customerDiscountCategory: window.customerDiscountCategory || null,
              customerPriceListId: window.customerPriceListId || null,
              standardUnit: null, // Will be handled by server-side fetching
              isOutletProduct: window.isOutletProduct || false
            };
            console.log(`Product page metafields applied:`, itemMetafields);
          }
          
          console.log(`Using metafields for ${item.variant_id}:`, itemMetafields);
        
          // Check if we have the essential monitor_id (required for pricing)
          const hasMonitorId = itemMetafields.monitorId;
          if (!hasMonitorId) {
            console.log(`No monitor_id available for ${item.variant_id}, enabling server-side fetching`);
            console.log(`Available pre-populated variants:`, Object.keys(window.cartItemsMetafields || {}));
            console.log(`Available product page variants:`, Object.keys(window.variantMonitorIds || {}));
          }          // Get dynamic price using metafields (from Liquid templates or product page context)
          const apiUrl = 'https://monitor-api-connect-production.up.railway.app/api/pricing-public';
          const priceResponse = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              variantId: variantId,
              customerId: customerId,
              shop: window.Shopify?.shop?.domain || window.location.hostname,
              // Use metafields from Liquid templates or product page context
              monitorId: itemMetafields.monitorId || null,
              isOutletProduct: itemMetafields.isOutletProduct || false,
              customerMonitorId: itemMetafields.customerMonitorId || null,
              customerDiscountCategory: itemMetafields.customerDiscountCategory || null,
              customerPriceListId: itemMetafields.customerPriceListId || null,
              // Enable server-side metafield fetching when monitor_id not available
              fetchMetafields: !hasMonitorId
            })
          });
          
          console.log(`Price response status: ${priceResponse.status}`);
          
          if (!priceResponse.ok) {
            console.error(`Price API error: ${priceResponse.status} ${priceResponse.statusText}`);
            continue; // Skip this item
          }
          
          const responseText = await priceResponse.text();
          console.log(`Price response text: ${responseText}`);
          
          try {
            priceData = JSON.parse(responseText);
            
            // Check if pricing failed due to missing monitor_id
            if (!priceData.price && priceData.metadata?.priceSource === 'missing-monitor-ids') {
              console.error(`❌ Pricing failed for variant ${item.variant_id}: Missing monitor_id metafield`);
              console.error(`This variant may not have monitor_id metafield set up properly in Shopify`);
            }
            
            // Cache the result
            priceCache.set(cacheKey, priceData);
          } catch (parseError) {
            console.error(`JSON parse error for variant ${item.variant_id}:`, parseError);
            console.error(`Response text was: ${responseText}`);
            continue; // Skip this item
          }
        } else {
          console.log(`Using cached price for variant ${item.variant_id}:`, priceData.price);
        }
        
        if (priceData.price !== null && priceData.price !== undefined) {
          // Determine if this is a decimal unit product by checking the DOM element
          const cartItem = document.querySelector(`li[data-variant-id="${item.variant_id}"]`);
          const quantityInput = cartItem?.querySelector('input[data-decimal="true"]');
          const isDecimalUnit = !!quantityInput;
          
          console.log(`Variant ${item.variant_id} is decimal unit: ${isDecimalUnit}`);
          
          // Calculate actual quantity for decimal products
          let actualQuantity = item.quantity;
          if (isDecimalUnit) {
            // This is a decimal product, convert integer quantity back to decimal
            actualQuantity = item.quantity / 20.0; // Convert back from integer to decimal
          }
          
          const lineTotal = priceData.price * actualQuantity;
          cartTotal += lineTotal;
          
          console.log(`Price for ${item.variant_id}: ${priceData.price} kr × ${actualQuantity} = ${lineTotal} kr`);
          
          // Update the price display in the DOM
          if (cartItem) {
            const priceElement = cartItem.querySelector('.cart-item__prices .price');
            if (priceElement) {
              // Keep the existing structure but update the price value
              const hasDiscount = priceElement.classList.contains('price--on-sale');
              if (hasDiscount) {
                // Update the sale price span
                const salePriceSpan = priceElement.querySelector('.price__regular');
                if (salePriceSpan) {
                  salePriceSpan.textContent = `${formatPrice(lineTotal)} kr`;
                }
              } else {
                // Update the regular price
                priceElement.innerHTML = `${formatPrice(lineTotal)} kr`;
              }
            }
          }
        } else {
          // Handle items without pricing - show "Contact for price" or keep original price
          console.log(`⚠️ No price available for variant ${item.variant_id}`);
          
          if (cartItem) {
            const priceElement = cartItem.querySelector('.cart-item__prices .price');
            if (priceElement) {
              // Add a visual indicator for items without custom pricing
              priceElement.style.opacity = '0.6';
              priceElement.title = 'Custom pricing not available for this item';
            }
          }
        }
      }
      
      // Update cart total display
      const totalElement = document.querySelector('.totals__subtotal-value');
      if (totalElement && cartTotal > 0) {
        totalElement.textContent = `${formatPrice(cartTotal)} kr`;
        console.log(`Updated cart total: ${formatPrice(cartTotal)} kr`);
      }
      
      // Remove loading state and show all prices
      showCartPrices();
      
    } catch (error) {
      console.error('Error updating cart prices:', error);
      // Show prices even on error to prevent permanent hidden state
      showCartPrices();
    } finally {
      // Reset the progress flag and clear timeout
      clearTimeout(resetFlag);
      priceUpdateInProgress = false;
    }
  }
  
  // Update prices when cart drawer opens
  const cartDrawer = document.querySelector('#CartDrawer');
  if (cartDrawer) {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && mutation.attributeName === 'hidden') {
          if (!cartDrawer.hasAttribute('hidden')) {
            console.log('Cart drawer opened, updating prices...');
            setTimeout(updateCartPrices, 200); // Small delay to ensure cart is loaded
          }
        }
      });
    });
    observer.observe(cartDrawer, { attributes: true });
  }
  
  // Also update when cart items change
  document.addEventListener('cart:updated', () => {
    console.log('Cart updated event, refreshing prices...');
    // Don't refresh metafields from product page - rely on server-side metafields
    setTimeout(updateCartPrices, 100);
  });
  
  // Function to refresh cart metafields from server when cart is updated
  async function refreshCartMetafields() {
    try {
      console.log('Refreshing cart metafields from server...');
      // Force a page refresh of cart metafields by reloading the cart drawer content
      // This ensures we get fresh metafields from Liquid for any new items
      
      // Note: The cart metafields are pre-populated by Liquid on page load.
      // When items are added via AJAX, we should rely on the server-side API
      // to provide correct metafields rather than trying to guess from client-side data.
      
      console.log('Current cart metafields:', window.cartItemsMetafields);
    } catch (error) {
      console.error('Error refreshing cart metafields:', error);
    }
  }
  
  // Initial setup
  if (!window.customer?.id) {
    // For non-logged-in customers, keep prices hidden - no pricing available
    console.log('Non-logged-in customer - prices will remain hidden');
  } else {
    // For logged-in customers, update prices if drawer is already open
    if (cartDrawer && !cartDrawer.hasAttribute('hidden')) {
      setTimeout(updateCartPrices, 500);
    }
  }
  
  // Target the specific checkout button in cart drawer
  const checkoutBtn = document.querySelector('.drawer__footer-buttons button[name="checkout"]');
  const checkoutForm = document.querySelector('form.drawer__footer-buttons');
  
  if (checkoutBtn) {
    console.log('Found cart drawer checkout button:', checkoutBtn);
    console.log('Found cart drawer checkout form:', checkoutForm);
    console.log('Customer object:', window.customer);
    console.log('Customer ID:', window.customer?.id);
    
    // Mark as intercepted
    checkoutBtn.setAttribute('data-checkout-intercepted', 'true');
    
    // Use multiple event handling strategies for maximum compatibility (same as main cart)
    
    // Strategy 1: Capture phase click event (fires before other handlers)
    checkoutBtn.addEventListener('click', async (e) => {
      console.log('Cart drawer capture phase click event fired');
      console.log('Customer check in capture click:', window.customer?.id);
      await handleCheckoutInterception(e);
    }, { capture: true });
    
    // Strategy 2: Normal click event 
    checkoutBtn.addEventListener('click', async (e) => {
      console.log('Cart drawer normal click event fired');
      console.log('Customer check in normal click:', window.customer?.id);
      await handleCheckoutInterception(e);
    });
    
    // Strategy 3: Form submission interception
    if (checkoutForm) {
      checkoutForm.addEventListener('submit', async (e) => {
        console.log('Cart drawer form submit event fired');
        console.log('Customer check in submit:', window.customer?.id);
        await handleCheckoutInterception(e);
      }, { capture: true });
    }
    
    // Strategy 4: Direct onclick handler (as backup)
    const originalOnClick = checkoutBtn.onclick;
    checkoutBtn.onclick = async function(e) {
      console.log('Cart drawer direct onclick handler fired');
      console.log('Customer check in onclick:', window.customer?.id);
      await handleCheckoutInterception(e);
      if (originalOnClick) originalOnClick.call(this, e);
    };
    
    async function handleCheckoutInterception(e) {
      console.log('Cart drawer handleCheckoutInterception called');
      console.log('Event type:', e.type);
      console.log('Event target:', e.target);
      console.log('window.customer:', window.customer);
      console.log('window.customer?.id:', window.customer?.id);
      
      if (window.customer?.id) {
        console.log('Customer found, preventing default checkout');
        e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation();
        
        // Additional prevention methods
        if (e.returnValue !== undefined) {
          e.returnValue = false;
        }
        
        console.log('Cart drawer checkout intercepted! Creating draft order...');
        
        // Show loading
        const btnText = checkoutBtn.querySelector('.btn__text');
        const originalText = btnText.innerHTML;
        btnText.innerHTML = 'Tillämpar dina priser...';
        checkoutBtn.disabled = true;
        
        try {
          // Get current cart
          const cartResponse = await fetch('/cart.js');
          const cart = await cartResponse.json();
          
          // Create items array with corrected decimal quantities (original working logic)
          const items = cart.items.map(item => {
            let actualQuantity = item.quantity;
            const quantityInput = document.querySelector(`li[data-variant-id="${item.variant_id}"] input[data-decimal="true"]`);
            if (quantityInput) {
              // This is a decimal product, convert integer quantity back to decimal
              actualQuantity = item.quantity / 20.0;
            }
            return {
              variantId: `gid://shopify/ProductVariant/${item.variant_id}`,
              quantity: actualQuantity
            };
          });
          
          console.log('Creating draft order with items:', items);
          
          // Get customer's price list ID from the first cart item's metafields (same as main cart)
          // Use the same fallback logic as the pricing system
          let firstItemMetafields = Object.values(window.cartItemsMetafields)[0] || {};
          let customerPriceListId = firstItemMetafields.customerPriceListId;
          
          // Fallback: use product page metafields if cart metafields are empty
          if (!customerPriceListId && window.customerPriceListId) {
            console.log('Using product page metafields for customer price list ID');
            customerPriceListId = window.customerPriceListId;
            firstItemMetafields = {
              ...firstItemMetafields,
              customerPriceListId: window.customerPriceListId,
              customerMonitorId: window.customerMonitorId || null,
              customerDiscountCategory: window.customerDiscountCategory || null
            };
          }
          
          console.log('Customer price list ID from metafields:', customerPriceListId);
          
          // Get goods label and order mark from cart
          const cartNoteElement = document.querySelector('textarea[name="note"]');
          const goodsLabel = cartNoteElement ? cartNoteElement.value.trim() : '';
          // Get order mark from cart attributes (persisted value)
          const orderMark = cart.attributes?.order_mark || '';
          console.log('Cart drawer goods label:', goodsLabel);
          console.log('Cart drawer order mark (from cart attributes):', orderMark);
          
          // Create draft order with dynamic pricing
          const response = await fetch('https://monitor-api-connect-production.up.railway.app/api/draft-order-public', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              customerId: `gid://shopify/Customer/${window.customer.id}`,
              items: items,
              shop: window.Shopify?.shop?.domain || window.location.hostname,
              priceListId: customerPriceListId, // Add the missing price list ID!
              goodsLabel: goodsLabel, // Add the goods label from cart note
              orderMark: orderMark // Add the order mark
            })
          });
          
          const result = await response.json();
          console.log('Draft order API response:', result);
          
          if (result.success && result.draftOrder && result.draftOrder.invoiceUrl) {
            console.log('Success! Redirecting to invoice:', result.draftOrder.invoiceUrl);
            window.location.href = result.draftOrder.invoiceUrl;
            return false; // Prevent any further form submission
          } else {
            console.error('No invoice URL in response:', result);
            throw new Error('No invoice URL received: ' + JSON.stringify(result));
          }
          
        } catch (error) {
          console.error('Draft order creation failed:', error);
          // Restore button
          btnText.innerHTML = originalText;
          checkoutBtn.disabled = false;
          
          // Show specific error message based on error type (same as main cart)
          let errorMessage = 'Något blev fel, försök igen senare.';
          
          try {
            // Try to parse error response to get specific message
            if (error.message && error.message.includes('No invoice URL received:')) {
              const responseStr = error.message.replace('No invoice URL received: ', '');
              const responseObj = JSON.parse(responseStr);
              if (responseObj.error) {
                errorMessage = responseObj.error;
              }
            }
          } catch (parseError) {
            console.log('Could not parse specific error message, using default');
          }
          
          alert(errorMessage);
        }
      } else {
        console.log('No customer logged in, allowing normal checkout');
        console.log('Customer object was:', window.customer);
        // Let normal checkout proceed for guests
        // Don't prevent default here - let the form submit normally
      }
    }
  } else {
    console.error('Cart drawer checkout button not found! Selector: .drawer__footer-buttons button[name="checkout"]');
  }
  
  // Fallback: Document-level form submission interceptor for cart drawer
  document.addEventListener('submit', async (e) => {
    // Check if this is the cart drawer checkout form
    if (e.target && e.target.classList.contains('drawer__footer-buttons')) {
      console.log('Document-level form submit interceptor fired for cart drawer!');
      console.log('Form element:', e.target);
      console.log('Customer check:', window.customer?.id);
      
      if (window.customer?.id) {
        console.log('Customer found in document-level interceptor, preventing form submission');
        e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation();
        
        // Find the checkout button in this form
        const submitBtn = e.target.querySelector('button[name="checkout"]');
        if (submitBtn) {
          console.log('Found checkout button, creating draft order...');
          
          // Show loading
          const btnText = submitBtn.querySelector('.btn__text');
          const originalText = btnText.innerHTML;
          btnText.innerHTML = 'Tillämpar dina priser...';
          submitBtn.disabled = true;
          
          try {
            // Get current cart
            const cartResponse = await fetch('/cart.js');
            const cart = await cartResponse.json();
            
            // Create items array with corrected decimal quantities (original working logic)
            const items = cart.items.map(item => {
              let actualQuantity = item.quantity;
              const quantityInput = document.querySelector(`li[data-variant-id="${item.variant_id}"] input[data-decimal="true"]`);
              if (quantityInput) {
                // This is a decimal product, convert integer quantity back to decimal
                actualQuantity = item.quantity / 20.0;
              }
              return {
                variantId: `gid://shopify/ProductVariant/${item.variant_id}`,
                quantity: actualQuantity
              };
            });
            
            console.log('Creating draft order with items:', items);
            
            // Get customer's price list ID from the first cart item's metafields
            // Use the same fallback logic as the pricing system
            let firstItemMetafields = Object.values(window.cartItemsMetafields)[0] || {};
            let customerPriceListId = firstItemMetafields.customerPriceListId;
            
            // Fallback: use product page metafields if cart metafields are empty
            if (!customerPriceListId && window.customerPriceListId) {
              console.log('Using product page metafields for customer price list ID');
              customerPriceListId = window.customerPriceListId;
              firstItemMetafields = {
                ...firstItemMetafields,
                customerPriceListId: window.customerPriceListId,
                customerMonitorId: window.customerMonitorId || null,
                customerDiscountCategory: window.customerDiscountCategory || null
              };
            }
            
            console.log('Customer price list ID from metafields:', customerPriceListId);
            
            // Get goods label and order mark from cart
            const cartNoteElement = document.querySelector('textarea[name="note"]');
            const goodsLabel = cartNoteElement ? cartNoteElement.value.trim() : '';
            // Get order mark from cart attributes (persisted value)
            const orderMark = cart.attributes?.order_mark || '';
            console.log('Cart drawer goods label (fallback):', goodsLabel);
            console.log('Cart drawer order mark (fallback, from cart attributes):', orderMark);
            
            // Create draft order with dynamic pricing
            const response = await fetch('https://monitor-api-connect-production.up.railway.app/api/draft-order-public', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                customerId: `gid://shopify/Customer/${window.customer.id}`,
                items: items,
                shop: window.Shopify?.shop?.domain || window.location.hostname,
                priceListId: customerPriceListId,
                goodsLabel: goodsLabel, // Add the goods label from cart note
                orderMark: orderMark // Add the order mark
              })
            });
            
            const result = await response.json();
            console.log('Draft order API response:', result);
            
            if (result.success && result.draftOrder && result.draftOrder.invoiceUrl) {
              console.log('Success! Redirecting to invoice:', result.draftOrder.invoiceUrl);
              window.location.href = result.draftOrder.invoiceUrl;
              return false;
            } else {
              console.error('No invoice URL in response:', result);
              throw new Error('No invoice URL received: ' + JSON.stringify(result));
            }
            
          } catch (error) {
            console.error('Draft order creation failed:', error);
            // Restore button
            btnText.innerHTML = originalText;
            submitBtn.disabled = false;
            
            // Show error message
            let errorMessage = 'Något blev fel, försök igen senare.';
            
            try {
              if (error.message && error.message.includes('No invoice URL received:')) {
                const responseStr = error.message.replace('No invoice URL received: ', '');
                const responseObj = JSON.parse(responseStr);
                if (responseObj.error) {
                  errorMessage = responseObj.error;
                }
              }
            } catch (parseError) {
              console.log('Could not parse specific error message, using default');
            }
            
            alert(errorMessage);
          }
        }
      }
    }
  }, { capture: true }); // Use capture phase to intercept early
});
</script>
{% endif %}
<!-- END: Dynamic Pricing Checkout for Cart Drawer -->

  </cart-drawer>
{%- endif -%}

{% schema %}
{
  "name": "t:sections.cart-drawer.name",
  "settings": [
    {
      "type": "header",
      "content": "t:general.general.name"
    },
    {
      "type": "checkbox",
      "id": "show_cart_note",
      "label": "t:sections.cart-drawer.settings.show_cart_note.label",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_shipping_rates_calculator",
      "label": "t:sections.cart-drawer.settings.show_shipping_rates_calculator.label"
    },
    {
      "type": "checkbox",
      "id": "show_free_shipping_goal",
      "label": "t:sections.cart-drawer.settings.show_free_shipping_goal.label",
      "default": true,
      "info": "t:settings_schema.cart.settings.free_shipping_minimum_amount.info"
    },
    {
      "type": "header",
      "content": "t:sections.cart-drawer.settings.cart_recommendations.header.content"
    },
    {
      "type": "paragraph",
      "content": "t:sections.cart-drawer.settings.cart_recommendations.paragraph.content"
    },
    {
      "type": "checkbox",
      "id": "enable_cart_recommendations",
      "label": "t:sections.cart-drawer.settings.cart_recommendations.enable.label",
      "default": true
    },
    {
      "type": "text",
      "id": "cart_recommendations_heading",
      "label": "t:general.heading.label",
      "default": "You may also like"
    },
    {
      "type": "range",
      "id": "cart_recommendations_limit",
      "label": "t:general.grid.product_limit.label",
      "min": 1,
      "max": 10,
      "step": 1,
      "default": 3
    },
    {
      "type": "product_list",
      "id": "cart_recommendations_products",
      "label": "t:sections.cart-drawer.settings.cart_recommendations.product_list.label"
    },
    {
      "type": "header",
      "content": "t:sections.cart-drawer.settings.cart_message.header.content"
    },
    {
      "type": "color_scheme",
      "id": "cart_mess_color_scheme",
      "label": "t:general.colors.label",
      "default": "scheme-inverse"
    },
    {
      "type": "text",
      "id": "cart_message",
      "label": "t:general.message.label"
    },
    {
      "type": "select",
      "id": "cart_message_alignment",
      "label": "t:general.text_alignment.label",
      "options": [
        {
          "value": "left",
          "label": "t:general.text_alignment.options__1.label"
        },
        {
          "value": "center",
          "label": "t:general.text_alignment.options__2.label"
        },
        {
          "value": "right",
          "label": "t:general.text_alignment.options__3.label"
        }
      ],
      "default": "center"
    }
  ]
}
{% endschema %}
