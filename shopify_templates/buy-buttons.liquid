{% comment %}
  Renders product buy-buttons.
  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} product form id.
  - section_id: {String} id of section to which this snippet belongs.

  Usage:
  {% render 'buy-buttons', block: block, product: product, product_form_id: product_form_id, section_id: section.id %}
{% endcomment %}

<script>
  // Global Balk calculator functions - defined at the very top
  window.addBalkRow = function(sectionId) {
    const rowsContainer = document.getElementById('balk-rows-' + sectionId);
    const newRow = document.createElement('div');
    newRow.className = 'balk-row';
    newRow.style.cssText = 'display: flex; gap: 0.5rem; align-items: center; flex-wrap: wrap;';
    
    newRow.innerHTML = `
      <div style="display: flex; flex-direction: column; gap: 0.25rem;">
        <label style="font-size: 0.875rem;">Antal</label>
        <input 
          type="number" 
          class="balk-antal" 
          min="1" 
          step="1"
          pattern="[0-9]*"
          value="1" 
          style="width: 70px; padding: 1rem; border: 1px solid #ccc; border-radius: 20px;"
          onchange="updateBalkTotalQuantity('${sectionId}')"
          oninput="updateBalkTotalQuantity('${sectionId}')"
          onkeypress="return event.charCode >= 48 && event.charCode <= 57"
        />
      </div>
      <div style="display: flex; flex-direction: column; gap: 0.25rem;">
        <label style="font-size: 0.875rem;">L√§ngd</label>
        <input 
          type="text" 
          class="balk-langd" 
          value="1,0" 
          style="width: 80px; padding: 1rem; border: 1px solid #ccc; border-radius: 20px;"
          onchange="updateBalkTotalQuantity('${sectionId}')"
          oninput="updateBalkTotalQuantity('${sectionId}')"
          pattern="[0-9]+([,][0-9]+)?"
          title="Anv√§nd komma som decimalseparator (t.ex. 2,5)"
        />
      </div>
      <button 
        type="button" 
        class="balk-add-row" 
        onclick="addBalkRow('${sectionId}')"
        style="margin-top: 1.25rem; padding: 0.5rem; border: 1px solid #ccc; border-radius: 20px; background: #f8f9fa; cursor: pointer; display: flex; align-items: center; justify-content: center; width: 40px; height: 40px;"
        title="L√§gg till rad"
      >
        <img src="{{ 'add_icon.svg' | asset_url }}" height="20" width="20" style="width: auto; margin-top: 1px;" alt="L√§gg till"/>
      </button>
      <button 
        type="button" 
        class="balk-remove-row" 
        onclick="removeBalkRow(this, '${sectionId}')"
        style="margin-top: 1.25rem; padding: 0.5rem; border: 1px solid #ccc; border-radius: 20px; background: #f8f9fa; cursor: pointer; display: flex; align-items: center; justify-content: center; width: 40px; height: 40px;"
        title="Ta bort rad"
      >
        <span style="pointer-events: none;">‚àí</span>
      </button>
    `;
    
    rowsContainer.appendChild(newRow);
    updateBalkTotalQuantity(sectionId);
  }
  
  window.removeBalkRow = function(button, sectionId) {
    const row = button.closest('.balk-row');
    const rowsContainer = document.getElementById('balk-rows-' + sectionId);
    
    // Don't remove if it's the only row
    if (rowsContainer.children.length > 1) {
      row.remove();
      updateBalkTotalQuantity(sectionId);
    }
  }
  
  window.updateBalkTotalQuantity = function(sectionId) {
    const rowsContainer = document.getElementById('balk-rows-' + sectionId);
    const quantityInput = document.getElementById('Quantity-' + sectionId);
    
    if (rowsContainer && quantityInput) {
      let totalQuantity = 0;
      
      // Sum all rows
      const rows = rowsContainer.querySelectorAll('.balk-row');
      rows.forEach(row => {
        const antalInput = row.querySelector('.balk-antal');
        const langdInput = row.querySelector('.balk-langd');
        
        if (antalInput && langdInput) {
          const antal = parseInt(antalInput.value) || 0;
          // Parse Swedish decimal format (comma as decimal separator)
          const langdValue = langdInput.value.replace(',', '.');
          const langd = parseFloat(langdValue) || 0;
          totalQuantity += antal * langd;
        }
      });
      
      // Format with Swedish decimal separator (comma)
      const formattedQuantity = totalQuantity.toFixed(2).replace('.', ',');
      quantityInput.value = formattedQuantity;
      
      // Save Balk configuration to cart attributes
      saveBalkConfigToCart(sectionId);
      
      // Trigger change event to update any other listeners
      quantityInput.dispatchEvent(new Event('change', { bubbles: true }));
      
      // Force disable buttons for Balk products (override theme logic)
      setTimeout(() => {
        const quantityElement = quantityInput.closest('quantity-input');
        if (quantityElement) {
          const minusButton = quantityElement.querySelector('button[name="minus"]');
          const plusButton = quantityElement.querySelector('button[name="plus"]');
          if (minusButton) minusButton.disabled = true;
          if (plusButton) plusButton.disabled = true;
        }
      }, 10);
    }
  }
  
  window.prepopulateBeamConfig = function(sectionId, configString, cartQuantity) {
    console.log('üîÑ Prepopulating beam config for section:', sectionId, 'config:', configString);
    
    const rowsContainer = document.getElementById('balk-rows-' + sectionId);
    if (!rowsContainer) {
      console.log('‚ùå No rows container found');
      return;
    }
    
    // Clear existing rows except the first one
    const existingRows = rowsContainer.querySelectorAll('.balk-row');
    for (let i = 1; i < existingRows.length; i++) {
      existingRows[i].remove();
    }
    
    // Parse the config string (format: "3√ó5,5m | 2√ó2,0m")
    const beamSpecs = configString.split(' | ').map(spec => spec.trim()).filter(spec => spec);
    
    beamSpecs.forEach((spec, index) => {
      // Parse each spec (format: "3√ó5,5m")
      const match = spec.match(/^(\d+)√ó([\d,]+)m?$/);
      if (match) {
        const antal = match[1];
        const langd = match[2];
        
        if (index === 0) {
          // Update the first row
          const firstRow = rowsContainer.querySelector('.balk-row');
          if (firstRow) {
            const antalInput = firstRow.querySelector('.balk-antal');
            const langdInput = firstRow.querySelector('.balk-langd');
            if (antalInput) antalInput.value = antal;
            if (langdInput) langdInput.value = langd;
          }
        } else {
          // Add new row
          addBalkRow(sectionId);
          const newRow = rowsContainer.querySelector('.balk-row:last-child');
          if (newRow) {
            const antalInput = newRow.querySelector('.balk-antal');
            const langdInput = newRow.querySelector('.balk-langd');
            if (antalInput) antalInput.value = antal;
            if (langdInput) langdInput.value = langd;
          }
        }
      }
    });
    
    // Update the total quantity (this should match the cart quantity)
    updateBalkTotalQuantity(sectionId);
    
    // Verify the calculated quantity matches cart quantity
    setTimeout(() => {
      if (cartQuantity > 0) {
        const quantityInput = document.getElementById('Quantity-' + sectionId);
        if (quantityInput) {
          const calculatedQuantity = parseFloat(quantityInput.value.replace(',', '.'));
          if (Math.abs(calculatedQuantity - cartQuantity) > 0.01) {
            console.warn('‚ö†Ô∏è Calculated quantity (' + calculatedQuantity + ') does not match cart quantity (' + cartQuantity + ')');
          } else {
            console.log('‚úÖ Quantity sync verified: ' + calculatedQuantity);
          }
        }
      }
    }, 100);
    
    console.log('‚úÖ Beam config prepopulated successfully');
  }
  
  window.saveBalkConfigToCart = function(sectionId) {
    console.log('üîß saveBalkConfigToCart called for section:', sectionId);
    
    const rowsContainer = document.getElementById('balk-rows-' + sectionId);
    const quantityInput = document.getElementById('Quantity-' + sectionId);
    
    if (!rowsContainer || !quantityInput) {
      console.log('‚ùå Missing DOM elements - rowsContainer:', !!rowsContainer, 'quantityInput:', !!quantityInput);
      return;
    }
    
    // Get the variant ID from the quantity input
    const variantId = quantityInput.getAttribute('data-quantity-variant-id');
    if (!variantId) {
      console.log('‚ùå No variant ID found on quantity input');
      return;
    }
    
    console.log('üîß Processing variant:', variantId);
    
    // Build the beam data structure for this variant
    const rows = rowsContainer.querySelectorAll('.balk-row');
    const selectedLengths = [];
    
    console.log('üîß Found', rows.length, 'balk rows to process');
    
    rows.forEach((row, index) => {
      const antalInput = row.querySelector('.balk-antal');
      const langdInput = row.querySelector('.balk-langd');
      
      if (antalInput && langdInput) {
        const antal = parseInt(antalInput.value) || 0;
        const langdValue = langdInput.value.replace(',', '.');
        const langd = parseFloat(langdValue) || 0;
        
        console.log(`üîß Row ${index + 1}: antal=${antal}, l√§ngd=${langd} (input: "${langdInput.value}")`);
        
        if (antal > 0 && langd > 0) {
          selectedLengths.push({
            length: langd.toString(),
            count: antal
          });
        }
      } else {
        console.log(`‚ùå Missing inputs in row ${index + 1} - antal:`, !!antalInput, 'l√§ngd:', !!langdInput);
      }
    });
    
    console.log('üîß Selected lengths array:', selectedLengths);
    
    if (selectedLengths.length > 0) {
      // Store the beam configuration in a data attribute on the quantity input
      // This will be picked up when the product is added to cart
      const beamConfig = {
        id: variantId,
        selected: selectedLengths
      };
      
      quantityInput.setAttribute('data-beam-config', JSON.stringify(beamConfig));
      console.log('‚úÖ Beam configuration stored on quantity input:', beamConfig);
      
      // Also trigger a custom event so the add to cart handler can pick this up
      const beamConfigEvent = new CustomEvent('beamConfigUpdated', {
        detail: { variantId, beamConfig }
      });
      document.dispatchEvent(beamConfigEvent);
      console.log('‚úÖ Beam config event dispatched');
    } else {
      console.log('‚ö†Ô∏è No valid length selections found, clearing beam config');
      quantityInput.removeAttribute('data-beam-config');
    }
  }

  // New UI Functions for single-form beam config
  window.addBalkSelection = function(sectionId) {
    const antalInput = document.getElementById('balk-antal-input-' + sectionId);
    const langdInput = document.getElementById('balk-langd-input-' + sectionId);
    const selectionsContainer = document.getElementById('balk-selections-' + sectionId);
    
    if (!antalInput || !langdInput || !selectionsContainer) return;
    
    const antal = parseInt(antalInput.value) || 0;
    const langdMm = parseInt(langdInput.value) || 0;
    
    if (antal <= 0 || langdMm <= 0) {
      alert('V√§nligen fyll i b√•de antal och l√§ngd');
      return;
    }
    
    // Convert mm to meters for calculation (but display mm in interface)
    const langdMeters = (langdMm / 1000).toFixed(3).replace('.', ',');
    
    // Create selection row
    const selectionRow = document.createElement('div');
    selectionRow.className = 'balk-selection-row';
    selectionRow.style.cssText = 'display: flex; align-items: center; gap: 0.5rem; padding: 0.5rem; border-bottom: .1rem solid rgb(var(--color-border));';
    
    selectionRow.innerHTML = `
      <span style="font-weight: 500;">${antal} √ó ${langdMm}mm</span>
      <button 
        type="button" 
        onclick="removeBalkSelection(this, '${sectionId}')"
        style="margin-left: auto; cursor: pointer; border: none; padding: 0;"
        title="Ta bort"
      >
        <img src="{{ 'delete_icon.svg' | asset_url }}" height="20" width="20" style="width: auto; margin-top: 1px;" alt="Ta bort rad"/>
      </button>
    `;
    
    // Store the data for later use (store in meters for calculation)
    selectionRow.setAttribute('data-antal', antal.toString());
    selectionRow.setAttribute('data-langd', langdMeters);
    selectionRow.setAttribute('data-langd-mm', langdMm.toString());
    
    selectionsContainer.appendChild(selectionRow);
    
    // Clear the form
    antalInput.value = '1';
    langdInput.value = '1000';
    
    // Update the hidden rows for backward compatibility
    updateHiddenRowsFromSelections(sectionId);
    
    console.log('‚úÖ Added beam selection:', antal + ' √ó ' + langd + 'm');
  }
  
  window.removeBalkSelection = function(button, sectionId) {
    const row = button.closest('.balk-selection-row');
    if (row) {
      row.remove();
      updateHiddenRowsFromSelections(sectionId);
      console.log('‚úÖ Removed beam selection');
    }
  }
  
  window.updateHiddenRowsFromSelections = function(sectionId) {
    const selectionsContainer = document.getElementById('balk-selections-' + sectionId);
    const hiddenRowsContainer = document.getElementById('balk-rows-' + sectionId);
    
    if (!selectionsContainer || !hiddenRowsContainer) return;
    
    // Clear hidden rows
    hiddenRowsContainer.innerHTML = '';
    
    // Get all selection rows
    const selectionRows = selectionsContainer.querySelectorAll('.balk-selection-row');
    
    // Create hidden rows for each selection to maintain backward compatibility
    selectionRows.forEach((selectionRow, index) => {
      const antal = selectionRow.getAttribute('data-antal');
      const langd = selectionRow.getAttribute('data-langd');
      
      const hiddenRow = document.createElement('div');
      hiddenRow.className = 'balk-row';
      hiddenRow.innerHTML = `
        <input type="number" class="balk-antal" value="${antal}" style="display: none;" />
        <input type="text" class="balk-langd" value="${langd}" style="display: none;" />
      `;
      
      hiddenRowsContainer.appendChild(hiddenRow);
    });
    
    // Update total quantity using existing function
    updateBalkTotalQuantity(sectionId);
    
    console.log('üîß Updated hidden rows, selections count:', selectionRows.length);
  }
  
  window.prepopulateNewBeamConfig = function(sectionId, configString, cartQuantity) {
    console.log('üîÑ Prepopulating new beam config for section:', sectionId, 'config:', configString);
    
    const selectionsContainer = document.getElementById('balk-selections-' + sectionId);
    if (!selectionsContainer) {
      console.log('‚ùå No selections container found');
      return;
    }
    
    // Clear existing selections
    selectionsContainer.innerHTML = '';
    
    // Parse the config string (format: "3√ó5,5m | 2√ó2,0m")
    const beamSpecs = configString.split(' | ').map(spec => spec.trim()).filter(spec => spec);
    
    beamSpecs.forEach((spec) => {
      // Parse each spec (format: "3√ó5,5m")
      const match = spec.match(/^(\d+)√ó([\d,]+)m?$/);
      if (match) {
        const antal = match[1];
        const langdMeters = match[2].replace(',', '.');
        
        // Convert meters to mm for display
        const langdMm = Math.round(parseFloat(langdMeters) * 1000);
        
        // Create selection row directly
        const selectionRow = document.createElement('div');
        selectionRow.className = 'balk-selection-row';
        selectionRow.style.cssText = 'display: flex; align-items: center; gap: 0.5rem; padding: 0.5rem; border-bottom: .1rem solid rgb(var(--color-border));';
        
        selectionRow.innerHTML = `
          <span style="font-weight: 500;">${antal} √ó ${langdMm}mm</span>
          <button 
            type="button" 
            onclick="removeBalkSelection(this, '${sectionId}')"
            style="margin-left: auto; cursor: pointer; border: none; padding: 0;"
            title="Ta bort"
          >
            <img src="{{ 'delete_icon.svg' | asset_url }}" height="20" width="20" style="width: auto; margin-top: 1px;" alt="Ta bort rad"/>
          </button>
        `;
        
        selectionRow.setAttribute('data-antal', antal);
        selectionRow.setAttribute('data-langd', match[2]); // Keep meters for calculation
        selectionRow.setAttribute('data-langd-mm', langdMm.toString());
        selectionsContainer.appendChild(selectionRow);
      }
    });
    
    // Update hidden rows for backward compatibility
    updateHiddenRowsFromSelections(sectionId);
    
    console.log('‚úÖ New beam config prepopulated successfully');
  }

  // Add form submission interceptor for beam data
  document.addEventListener('DOMContentLoaded', function() {
    console.log('üîß Setting up beam data form interceptor');
    
    // Find all product forms and add event listeners
    const productForms = document.querySelectorAll('form[action*="/cart/add"]');
    console.log('üîß Found', productForms.length, 'product forms');
    
    productForms.forEach(form => {
      // Only add listener if this form doesn't already have our beam interceptor
      if (form.dataset.beamInterceptorAdded) return;
      form.dataset.beamInterceptorAdded = 'true';
      
      form.addEventListener('submit', function(event) {
        console.log('üîß Form submission intercepted for beam data processing');
        
        // Find the quantity input in this specific form
        const quantityInput = form.querySelector('input[name="quantity"]');
        if (!quantityInput) {
          console.log('üîß No quantity input found in this form');
          return;
        }
        
        // Check if this quantity input has beam configuration
        const beamConfigStr = quantityInput.getAttribute('data-beam-config');
        if (!beamConfigStr) {
          console.log('üîß No beam config found on quantity input');
          return;
        }
        
        try {
          const beamConfig = JSON.parse(beamConfigStr);
          console.log('üîß Found beam config to add as properties:', beamConfig);
          
          // Remove any existing beam properties from this form to avoid duplicates
          const existingBeamProperties = form.querySelectorAll('input[name="properties[Balkspecifikation]"]');
          existingBeamProperties.forEach(prop => {
            console.log('üîß Removing existing beam property:', prop.name);
            prop.remove();
          });
          
          // Add beam configuration as a single summary property with pipe separators
          const summaryParts = beamConfig.selected.map(item => 
            `${item.count}√ó${item.length.replace('.', ',')}m`
          );
          const summaryInput = document.createElement('input');
          summaryInput.type = 'hidden';
          summaryInput.name = 'properties[Balkspecifikation]';
          summaryInput.value = summaryParts.join(' | ');
          form.appendChild(summaryInput);
          
          console.log(`üîß Added beam specification: ${summaryInput.value}`);
          
          console.log('‚úÖ Added beam data as line item properties');
          
        } catch (error) {
          console.error('‚ùå Error parsing beam config:', error);
        }
      }, { capture: true }); // Use capture to run before other form handlers
    });
  });
</script>

{%- if product != blank -%}
  {%- liquid
    assign gift_card_recipient_feature_active = false
    if block.settings.show_gift_card_recipient and product.gift_card?
      assign gift_card_recipient_feature_active = true
    endif

    assign show_dynamic_checkout = false
    if block.settings.show_dynamic_checkout and gift_card_recipient_feature_active == false
      assign show_dynamic_checkout = true
    endif

    # Get the standard unit from the selected variant's metafields
    assign standard_unit = blank
    assign allows_decimal = false
    assign quantity_step = 1
    assign quantity_unit = 'items'
    
    # Access the standard_unit metafield directly from the variant
    assign standard_unit_metafield = product.selected_or_first_available_variant.metafields.custom.standard_unit
    if standard_unit_metafield
      assign standard_unit = standard_unit_metafield.value
    endif
    
    # Determine if decimals are allowed based on unit
    # Units that require whole numbers: "st", "rle", "pkt", "p√•s", "Sk", "krt", "frp"
    assign whole_number_units = 'st,rle,pkt,p√•s,Sk,krt,frp' | split: ','
    assign allows_decimal = true
    
    for unit in whole_number_units
      if standard_unit == unit
        assign allows_decimal = false
        break
      endif
    endfor
    
    # Check if product is in Kakel & Klinker collection
    assign is_kakel_klinker = false
    for collection in product.collections
      if collection.id == 650145923406
        assign is_kakel_klinker = true
        break
      endif
    endfor
    
    # Check if product is in Balk collection
    assign is_balk = false
    for collection in product.collections
      if collection.id == 650179477838
        assign is_balk = true
        break
      endif
    endfor
    
    # Get quantity package from variant metafield
    assign quantity_package = blank
    assign quantity_package_metafield = product.selected_or_first_available_variant.metafields.custom.quantity_package
    if quantity_package_metafield
      assign quantity_package = quantity_package_metafield.value
    endif
    
    # Set step and unit display
    if allows_decimal
      if is_kakel_klinker and quantity_package != blank
        assign quantity_step = quantity_package
        assign min_quantity = quantity_package
      else
        assign quantity_step = 0.05
        assign min_quantity = 0.05
      endif
      if standard_unit != blank
        assign quantity_unit = standard_unit
      else
        assign quantity_unit = 'units'
      endif
    else
      assign quantity_step = 1
      assign min_quantity = 1
      if standard_unit != blank
        assign quantity_unit = standard_unit
      else
        assign quantity_unit = 'items'
      endif
    endif
  -%}
  <div
    class="product-form"
    data-hide-errors="{{ gift_card_recipient_feature_active }}"
    data-section-id="{{ section.id }}"
  >
    <div class="product-form__error-message-wrapper" role="alert" hidden>
      <svg
        aria-hidden="true"
        focusable="false"
        class="icon icon-error"
        viewBox="0 0 13 13"
      >
        <circle cx="6.5" cy="6.50049" r="5.5" stroke="white" stroke-width="2"/>
        <circle cx="6.5" cy="6.5" r="5.5" fill="#EB001B" stroke="#EB001B" stroke-width="0.7"/>
        <path d="M5.87413 3.52832L5.97439 7.57216H7.02713L7.12739 3.52832H5.87413ZM6.50076 9.66091C6.88091 9.66091 7.18169 9.37267 7.18169 9.00504C7.18169 8.63742 6.88091 8.34917 6.50076 8.34917C6.12061 8.34917 5.81982 8.63742 5.81982 9.00504C5.81982 9.37267 6.12061 9.66091 6.50076 9.66091Z" fill="white"/>
        <path d="M5.87413 3.17832H5.51535L5.52424 3.537L5.6245 7.58083L5.63296 7.92216H5.97439H7.02713H7.36856L7.37702 7.58083L7.47728 3.537L7.48617 3.17832H7.12739H5.87413ZM6.50076 10.0109C7.06121 10.0109 7.5317 9.57872 7.5317 9.00504C7.5317 8.43137 7.06121 7.99918 6.50076 7.99918C5.94031 7.99918 5.46982 8.43137 5.46982 9.00504C5.46982 9.57872 5.94031 10.0109 6.50076 10.0109Z" fill="white" stroke="#EB001B" stroke-width="0.7">
      </svg>
      <div class="product-form__error-message blocks-radius-md alert alert--error" role="alert" hidden></div>
    </div>
    {%- form 'product',
      product,
      id: product_form_id,
      class: 'main-product-form grid gap-4',
      novalidate: 'novalidate',
      data-type: 'add-to-cart-form',
      is: 'product-form',
      data-hide-errors: gift_card_recipient_feature_active
    -%}
      <input
        type="hidden"
        name="id"
        value="{{ product.selected_or_first_available_variant.id }}"
        {% if product.selected_or_first_available_variant.available == false or quantity_rule_soldout %}
          disabled
        {% endif %}
        class="product-variant-id"
      >
      {%- liquid
        assign check_against_inventory = true
        if product.selected_or_first_available_variant.inventory_management != 'shopify' or product.selected_or_first_available_variant.inventory_policy == 'continue'
          assign check_against_inventory = false
        endif
        if product.selected_or_first_available_variant.quantity_rule.min > product.selected_or_first_available_variant.inventory_quantity and check_against_inventory
          assign quantity_rule_soldout = true
        endif
      -%}
      {%- if gift_card_recipient_feature_active -%}
        {%- render 'gift-card-recipient-form', product: product, form: form, section: section -%}
      {%- endif -%}

      {%- if product.quantity_price_breaks_configured? and block.settings.show_quantity_selector -%}
        <div
          id="QuantityForm-{{ section_id }}"
          class="grid gap-4"
        >
          {%- assign cart_qty = cart | item_count_for_variant: product.selected_or_first_available_variant.id -%}

          <div class="grid gap-2">
            <div class="grid gap-3">
              <label class="quantity__label form__label" for="Quantity-{{ section.id }}">
                <span class="font-body-bold">{{ 'products.product.quantity.label' | t }}</span>

                <span
                  id="QuantityRulesCart-{{ section_id }}"
                  class="quantity__rules-cart{% if cart_qty == 0 %} hidden{% endif %} relative inline-flex items-center"
                >
                  {%- render 'loading-spinner' -%}
                  <span class="quantity-cart font-body-bold"
                    >({{ 'products.product.quantity.in_cart_html' | t: quantity: cart_qty }})</span
                  >
                </span>
              </label>
              <div class="flex items-center gap-4">
                <quantity-input class="quantity" data-section-id="{{ section_id }}" data-product-id="{{ product_id }}">
                  <button class="quantity__button" name="minus" type="button"{% if is_balk %} disabled{% endif %}>
                    <span class="visually-hidden">
                      {{- 'products.product.quantity.decrease' | t: product: product.title | escape -}}
                    </span>
                    {% render 'icon-minus' %}
                  </button>
                  <input
                    class="quantity__input"
                    {% if allows_decimal %}type="text"{% else %}type="number"{% endif %}
                    name="quantity"
                    id="Quantity-{{ section.id }}"
                    data-cart-quantity="{{ cart_qty }}"
                    {% if allows_decimal %}
                      step="{{ quantity_step }}"
                      value="{% if is_kakel_klinker and quantity_package != blank %}{{ quantity_package }}{% elsif is_balk %}1,00{% else %}1.00{% endif %}"
                      data-min="{{ min_quantity }}"
                      min="{{ min_quantity }}"
                      data-decimal="true"
                      data-unit="{{ quantity_unit }}"
                      {% if is_kakel_klinker and quantity_package != blank %}readonly{% endif %}
                      {% if is_balk %}readonly{% endif %}
                    {% else %}
                      step="{{ product.selected_or_first_available_variant.quantity_rule.increment }}"
                      value="{{ product.selected_or_first_available_variant.quantity_rule.min }}"
                      data-min="{{ product.selected_or_first_available_variant.quantity_rule.min }}"
                      min="{{ product.selected_or_first_available_variant.quantity_rule.min }}"
                      data-decimal="false"
                      {% if is_balk %}readonly{% endif %}
                    {% endif %}
                    data-quantity-variant-id="{{ product.selected_or_first_available_variant.id }}"
                    {% if product.selected_or_first_available_variant.quantity_rule.max != null %}
                      data-max="{{ product.selected_or_first_available_variant.quantity_rule.max }}"
                      max="{{ product.selected_or_first_available_variant.quantity_rule.max }}"
                    {% endif %}
                    inputmode="numeric"
                    autocomplete="off"
                    form="{{ product_form_id }}"
                  >
                  <button class="quantity__button" name="plus" type="button"{% if is_balk %} disabled{% endif %}>
                    <span class="visually-hidden">
                      {{- 'products.product.quantity.increase' | t: product: product.title | escape -}}
                    </span>
                    {% render 'icon-plus' %}
                  </button>
                </quantity-input>
                
                {% if quantity_unit != blank and quantity_unit != 'items' %}
                  <span class="quantity-unit">{{ quantity_unit }}</span>
                {% endif %}

                {%- if product.quantity_price_breaks_configured? -%}
                  {%- liquid
                    assign volume_pricing_array = product.selected_or_first_available_variant.quantity_price_breaks | sort: 'quantity' | reverse
                    assign current_qty_for_volume_pricing = cart_qty | plus: product.selected_or_first_available_variant.quantity_rule.min
                    if cart_qty > 0
                      assign current_qty_for_volume_pricing = cart_qty | plus: product.selected_or_first_available_variant.quantity_rule.increment
                    endif
                    assign variant_price_compare = product.selected_or_first_available_variant.compare_at_price
                  -%}
                  <price-per-item
                    id="PricePerItem-{{ section_id }}"
                    class="flex flex-wrap items-center gap-2"
                    data-section-id="{{ section_id }}"
                    data-product-id="{{ product_id }}"
                    data-variant-id="{{ product.selected_or_first_available_variant.id }}"
                  >
                    {%- if variant_price_compare -%}
                      <span class="visually-hidden">{{ 'products.product.price.regular_price' | t }}</span>
                      <span class="inline-flex items-center h-auto relative">
                        {%- liquid
                          if settings.currency_code_enabled
                            echo variant_price_compare | money_with_currency
                          else
                            echo variant_price_compare | money
                          endif
                        -%}
                      </span>
                      <span class="visually-hidden">{{ 'products.product.price.sale_price' | t }}</span>
                    {%- endif -%}

                    {%- if product.selected_or_first_available_variant.quantity_price_breaks.size > 0 -%}
                      {%- if current_qty_for_volume_pricing < volume_pricing_array.last.minimum_quantity -%}
                        {%- liquid
                          if settings.currency_code_enabled
                            assign variant_price = product.selected_or_first_available_variant.price | money_with_currency
                          else
                            assign variant_price = product.selected_or_first_available_variant.price | money
                          endif
                        -%}
                        <span class="price-per-item--current price__regular whitespace-nowrap">
                          {{- 'products.product.volume_pricing.price_at_each' | t: price: variant_price -}}
                        </span>
                      {%- else -%}
                        {%- for price_break in volume_pricing_array -%}
                          {%- if current_qty_for_volume_pricing >= price_break.minimum_quantity -%}
                            {%- liquid
                              if settings.currency_code_enabled
                                assign price_break_price = price_break.price | money_with_currency
                              else
                                assign price_break_price = price_break.price | money
                              endif
                            -%}
                            <span class="price-per-item--current price__regular whitespace-nowrap">
                              {{- 'products.product.volume_pricing.price_at_each' | t: price: price_break_price -}}
                            </span>
                            {%- break -%}
                          {%- endif -%}
                        {%- endfor -%}
                      {%- endif -%}
                    {%- else -%}
                      <span class="price-per-item--current price__regular whitespace-nowrap">
                        {%- liquid
                          if settings.currency_code_enabled
                            assign variant_price = product.selected_or_first_available_variant.price | money_with_currency
                          else
                            assign variant_price = product.selected_or_first_available_variant.price | money
                          endif
                        -%}
                        {{- 'products.product.volume_pricing.price_at_each' | t: price: variant_price -}}
                      </span>
                    {%- endif -%}
                  </price-per-item>
                {%- endif -%}
              </div>
            </div>

            <div
              class="quantity__rules"
              id="QuantityRules-{{ section_id }}"
            >
              {%- if product.selected_or_first_available_variant.quantity_rule.increment > 1 -%}
                <span class="divider">
                  {{-
                    'products.product.quantity.multiples_of'
                    | t: quantity: product.selected_or_first_available_variant.quantity_rule.increment
                  -}}
                </span>
              {%- endif -%}
              {%- if product.selected_or_first_available_variant.quantity_rule.min > 1 -%}
                <span class="divider">
                  {{-
                    'products.product.quantity.minimum_of'
                    | t: quantity: product.selected_or_first_available_variant.quantity_rule.min
                  -}}
                </span>
              {%- endif -%}
              {%- if product.selected_or_first_available_variant.quantity_rule.max != null -%}
                <span class="divider font-body-bold">
                  {{-
                    'products.product.quantity.maximum_of'
                    | t: quantity: product.selected_or_first_available_variant.quantity_rule.max
                  -}}
                </span>
              {%- endif -%}
            </div>
          </div>

          {%- if product.quantity_price_breaks_configured? -%}
            <volume-pricing class="block parent-display blocks-radius-md" id="Volume-{{ section.id }}">
              {%- if product.selected_or_first_available_variant.quantity_price_breaks.size > 0 -%}
                <span class="caption block">{{ 'products.product.volume_pricing.title' | t }}</span>
                <ul class="list-unstyled">
                  <li class="blocks-radius-md">
                    <span>{{ product.selected_or_first_available_variant.quantity_rule.min }}+</span>
                    {%- liquid
                      if settings.currency_code_enabled
                        assign price = product.selected_or_first_available_variant.price | money_with_currency
                      else
                        assign price = product.selected_or_first_available_variant.price | money
                      endif
                    -%}
                    <span data-text="{{ 'products.product.volume_pricing.price_at_each' | t: price: price }}">
                      {{- 'products.product.volume_pricing.each' | t: money: price -}}
                    </span>
                  </li>
                  {%- for price_break in product.selected_or_first_available_variant.quantity_price_breaks -%}
                    {%- liquid
                      if settings.currency_code_enabled
                        assign price_break_price = price_break.price | money_with_currency
                      else
                        assign price_break_price = price_break.price | money
                      endif
                    -%}
                    <li class="blocks-radius-md{% if forloop.index >= 3 %} show-more-item hidden{% endif %}">
                      <span>
                        {{- price_break.minimum_quantity -}}
                        <span aria-hidden="true">+</span></span
                      >
                      <span data-text="{{ 'products.product.volume_pricing.price_at_each' | t: price: price_break_price }}">
                        {{- 'products.product.volume_pricing.each' | t: money: price_break_price -}}
                      </span>
                    </li>
                  {%- endfor -%}
                </ul>
                {%- if product.selected_or_first_available_variant.quantity_price_breaks.size >= 3 -%}
                  <show-more-button>
                    <button
                      class="button-show-more btn--link"
                      id="Show-More-{{ section.id }}"
                      type="button"
                    >
                      <span class="label-show-more label-text"
                        ><span aria-hidden="true">+ </span>{{ 'products.facets.show_more' | t }}
                      </span>
                    </button>
                  </show-more-button>
                {%- endif -%}
              {%- endif -%}
            </volume-pricing>
          {%- endif -%}
        </div>
      {%- endif -%}

      {%- if is_balk -%}
        <div class="balk-in-cart-message" style="margin-bottom: 1rem; padding: 1rem; border: 1px solid #ccc; border-radius: 8px; display: none;">
          <p style="margin: 0; font-weight: bold; color: #333;">
            Produkten √§r redan tillagd i varukorgen, ta bort den om du beh√∂ver √§ndra.
          </p>
        </div>
        
        <div class="balk-custom-calculator" style="margin-bottom: 1rem;">
          <p style="margin-bottom: 1rem; font-weight: bold;">V√§lj antal och l√§ngder</p>
          
          <!-- Single input form -->
          <div class="balk-input-form" style="display: flex; gap: 0.5rem; align-items: center; margin-bottom: 1rem;">
            <input 
              type="number" 
              id="balk-antal-input-{{ section_id }}"
              class="balk-antal-input" 
              min="1" 
              step="1"
              pattern="[0-9]*"
              value="1" 
              style="width: 70px; padding: 1rem; border: 1px solid #ccc; border-radius: 20px;"
              onkeypress="return event.charCode >= 48 && event.charCode <= 57"
            />
            <span style="font-size: 1rem;">st</span>
            <input 
              type="number" 
              id="balk-langd-input-{{ section_id }}"
              class="balk-langd-input" 
              value="1000" 
              min="1"
              step="1"
              style="width: 80px; padding: 1rem; border: 1px solid #ccc; border-radius: 20px;"
              pattern="[0-9]*"
              title="L√§ngd i millimeter"
              onkeypress="return event.charCode >= 48 && event.charCode <= 57"
            />
            <span style="font-size: 1rem;">mm</span>
            <button 
              type="button" 
              class="balk-add-selection" 
              onclick="addBalkSelection('{{ section_id }}')"
              style="padding: 1rem; border: none; border-radius: 20px; background: #5474ff; color: white; cursor: pointer; display: flex; align-items: center; justify-content: center; height: 38px; min-width: 38px;"
              title="L√§gg till val"
            >
              {% render 'icon-plus' currentColor='white' %}
            </button>
          </div>
          
          <!-- Selected rows display -->
          <div id="balk-selections-{{ section_id }}" class="balk-selections" style="display: flex; flex-direction: column; gap: 0.5rem;">
            <!-- Selected rows will be added here -->
          </div>
          
          <!-- Hidden container for backward compatibility with existing functions -->
          <div id="balk-rows-{{ section_id }}" style="display: none;">
            <!-- Hidden rows for backward compatibility -->
          </div>
        </div>
      {%- endif -%}

      <div class="product-form__buttons" id="QuantityForm-{{ section_id }}">
        {%- if block.settings.show_quantity_selector and product.quantity_price_breaks_configured? != true -%}
          {%- assign cart_qty = cart | item_count_for_variant: product.selected_or_first_available_variant.id -%}
          <div class="product-form__quantity">
            <label class="quantity__label form__label visually-hidden" for="Quantity-{{ section.id }}">
              <span class="font-body-bolder">{{ 'products.product.quantity.label' | t }}</span>
            </label>
            <quantity-input
              class="quantity"
              data-section-id="{{ section_id }}"
              data-product-id="{{ product_id }}"
            >
              <button class="quantity__button" name="minus" type="button"{% if is_balk %} disabled{% endif %}>
                <span class="visually-hidden">
                  {{- 'products.product.quantity.decrease' | t: product: product.title | escape -}}
                </span>
                {% render 'icon-minus' %}
              </button>
              <input
                class="quantity__input"
                {% if allows_decimal %}type="text"{% else %}type="number"{% endif %}
                name="quantity"
                id="Quantity-{{ section.id }}"
                data-cart-quantity="{{ cart_qty }}"
                {% if allows_decimal %}
                  step="{{ quantity_step }}"
                  value="{% if is_kakel_klinker and quantity_package != blank %}{{ quantity_package }}{% elsif is_balk %}1,00{% else %}1.00{% endif %}"
                  data-min="{{ min_quantity }}"
                  min="{{ min_quantity }}"
                  data-decimal="true"
                  data-unit="{{ quantity_unit }}"
                  {% if is_kakel_klinker and quantity_package != blank %}readonly{% endif %}
                  {% if is_balk %}readonly{% endif %}
                {% else %}
                  step="{{ product.selected_or_first_available_variant.quantity_rule.increment }}"
                  value="{{ product.selected_or_first_available_variant.quantity_rule.min }}"
                  data-min="{{ product.selected_or_first_available_variant.quantity_rule.min }}"
                  min="{{ product.selected_or_first_available_variant.quantity_rule.min }}"
                  data-decimal="false"
                  {% if is_balk %}readonly{% endif %}
                {% endif %}
                data-quantity-variant-id="{{ product.selected_or_first_available_variant.id }}"
                {% if product.selected_or_first_available_variant.quantity_rule.max != null %}
                  data-max="{{ product.selected_or_first_available_variant.quantity_rule.max }}"
                  max="{{ product.selected_or_first_available_variant.quantity_rule.max }}"
                {% endif %}
                inputmode="numeric"
                autocomplete="off"
                form="{{ product_form_id }}"
              >
              <button class="quantity__button" name="plus" type="button"{% if is_balk %} disabled{% endif %}>
                <span class="visually-hidden">
                  {{- 'products.product.quantity.increase' | t: product: product.title | escape -}}
                </span>
                {% render 'icon-plus' %}
              </button>
            </quantity-input>
            
            {% if quantity_unit != blank and quantity_unit != 'items' %}
              <span class="quantity-unit">{{ quantity_unit }}</span>
            {% endif %}
          </div>
        {%- endif -%}
        {%- comment -%} Check if this is a balk product in cart for button state {%- endcomment -%}
        {%- assign balk_variant_in_cart = false -%}
        {%- if is_balk -%}
          {%- for item in cart.items -%}
            {%- if item.variant_id == product.selected_or_first_available_variant.id -%}
              {%- assign balk_variant_in_cart = true -%}
              {%- break -%}
            {%- endif -%}
          {%- endfor -%}
        {%- endif -%}
        
        <button
          id="ProductSubmitButton-{{ section_id }}"
          type="submit"
          name="add"
          class="product-form__submit btn{% if show_dynamic_checkout %} btn--secondary{% else %} btn--primary{% endif %}"
          {% if product.selected_or_first_available_variant.available == false or quantity_rule_soldout or balk_variant_in_cart %}
            disabled
          {% endif %}
        >
          <span class="btn__text">
            {%- if product.selected_or_first_available_variant.available == false or quantity_rule_soldout -%}
              {{ 'products.product.sold_out' | t }}
            {%- elsif balk_variant_in_cart -%}
              Redan i varukorg
            {%- else -%}
              {{ 'products.product.add_to_cart' | t }}
            {%- endif -%}
          </span>
          {%- render 'loading-spinner' -%}
        </button>
        
        {%- if is_balk -%}
          {%- comment -%} Build variant-to-cart mapping for all beam products in cart {%- endcomment -%}
          <script type="application/json" id="beam-cart-data-{{ section_id }}">
            {
              {% for item in cart.items %}
                {% if item.product.collections contains collections['balk'] %}
                  "{{ item.variant.id }}": {
                    "config": {{ item.properties['Balkspecifikation'] | json }},
                    "quantity": {{ item.quantity }}
                  }{% unless forloop.last %},{% endunless %}
                {% endif %}
              {% endfor %}
            }
          </script>
          
          <script>
            // Get beam cart data from Liquid-generated JSON
            const beamCartData = JSON.parse(document.getElementById('beam-cart-data-{{ section_id }}').textContent || '{}');
            
            // Function to update beam config based on variant
            function updateBeamConfigForVariant(variantId) {
              console.log('üîß Updating beam config for variant:', variantId);
              
              const cartData = beamCartData[variantId];
              const rowsContainer = document.getElementById('balk-rows-{{ section_id }}');
              const submitButton = document.getElementById('ProductSubmitButton-{{ section_id }}');
              const buttonText = submitButton ? submitButton.querySelector('.btn__text') : null;
              const calculatorContainer = document.querySelector('.balk-custom-calculator');
              const inCartMessage = document.querySelector('.balk-in-cart-message');
              
              // Check if this variant is in cart
              const variantInCart = cartData && cartData.config && cartData.config.trim();
              
              // Update button state and text
              if (submitButton && buttonText) {
                if (variantInCart) {
                  submitButton.disabled = true;
                  buttonText.textContent = 'Redan i varukorg';
                } else {
                  submitButton.disabled = false;
                  buttonText.textContent = '{{ 'products.product.add_to_cart' | t }}';
                }
              }
              
              // Show/hide calculator vs. message
              if (calculatorContainer && inCartMessage) {
                if (variantInCart) {
                  calculatorContainer.style.display = 'none';
                  inCartMessage.style.display = 'block';
                } else {
                  calculatorContainer.style.display = 'block';
                  inCartMessage.style.display = 'none';
                }
              }
              
              // Update beam configuration
              if (variantInCart) {
                prepopulateNewBeamConfig('{{ section_id }}', cartData.config, cartData.quantity);
              } else {
                // Clear selections and reset to defaults
                const selectionsContainer = document.getElementById('balk-selections-{{ section_id }}');
                if (selectionsContainer) {
                  selectionsContainer.innerHTML = '';
                }
                
                // Reset input form
                const antalInput = document.getElementById('balk-antal-input-{{ section_id }}');
                const langdInput = document.getElementById('balk-langd-input-{{ section_id }}');
                if (antalInput) antalInput.value = '1';
                if (langdInput) langdInput.value = '1000';
                
                // Update hidden rows for backward compatibility
                updateHiddenRowsFromSelections('{{ section_id }}');
              }
            }

            // Initialize calculation on page load for this specific section
            document.addEventListener('DOMContentLoaded', function() {
              // Get initial variant and update beam config
              const initialVariantInput = document.querySelector('input[name="id"]:checked, select[name="id"], input[name="id"]');
              if (initialVariantInput) {
                updateBeamConfigForVariant(initialVariantInput.value);
              }
              
              // Listen for variant changes using the same approach as product-information-blocks
              document.addEventListener('change', function(event) {
                if (event.target.name === 'id' || event.target.matches('[data-variant-id]')) {
                  const variantId = event.target.value || event.target.dataset.variantId;
                  if (variantId) {
                    updateBeamConfigForVariant(variantId);
                  }
                }
              });
              
              // Also listen for custom variant change events
              document.addEventListener('variant:change', function(event) {
                if (event.detail && event.detail.variant) {
                  updateBeamConfigForVariant(event.detail.variant.id);
                }
              });
              
              // Also listen for any quantity changes and re-disable buttons
              const quantityInput = document.getElementById('Quantity-{{ section_id }}');
              if (quantityInput) {
                quantityInput.addEventListener('change', function() {
                  setTimeout(() => {
                    const quantityElement = quantityInput.closest('quantity-input');
                    if (quantityElement) {
                      const minusButton = quantityElement.querySelector('button[name="minus"]');
                      const plusButton = quantityElement.querySelector('button[name="plus"]');
                      if (minusButton) minusButton.disabled = true;
                      if (plusButton) plusButton.disabled = true;
                    }
                  }, 10);
                });
              }
            });
          </script>
        {%- endif -%}
        
        {%- if show_dynamic_checkout -%}
          {{ form | payment_button }}
        {%- endif -%}
      </div>
      <div class="product-form__error-message blocks-radius-md alert alert--error" role="alert" hidden></div>
    {%- endform -%}
  </div>
{%- else -%}
  <div class="product-form">
    <div class="product-form__buttons form">
      <button
        type="submit"
        name="add"
        class="product-form__submit button button--full-width button--primary"
        disabled
      >
        {{ 'products.product.sold_out' | t }}
      </button>
    </div>
  </div>
{%- endif -%}
