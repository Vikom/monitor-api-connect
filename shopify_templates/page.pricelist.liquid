{% comment %}
  Customer Price List Page Template
{% endcomment %}

{% unless customer %}
  {% assign return_url = request.path | url_encode %}
  {% assign login_url = routes.account_login_url | append: '?return_url=' | append: return_url %}
  <script>
    window.location.href = "{{ login_url }}";
  </script>
  <div class="customer-login-redirect">
    <p>Redirecting to login...</p>
    <a href="{{ login_url }}">Click here if you're not redirected automatically</a>
  </div>
{% else %}

<div class="price-list-container">
  <div class="page-header">
    <h1>{{ page.title | default: "Begär prislista" }}</h1>
    <p>Välj produkter för att skapa din prislista. Prislistan skickas till din e-postadress: <strong>{{ customer.email }}</strong></p>
    <p>Det kan dröja några minuter efter att du skickat begäran.</p>
  </div>

  <div class="price-list-form">
    <form id="priceListForm">
      <!-- Collections Selection -->
      <div id="collectionsSelection" class="selection-section">
        <div id="groupedCollections">
          <!-- Collections will be grouped and rendered here by JavaScript -->
        </div>
        
        <!-- Hidden data for JavaScript processing -->
        <script type="application/json" id="collectionsData">
          [
            {% for collection in collections %}
              {% unless collection.handle == 'frontpage' or collection.handle == 'all' %}
                {
                  "id": "{{ collection.id }}",
                  "title": "{{ collection.title }}",
                  "products_count": {{ collection.products_count }},
                  "monitor_id": "{{ collection.metafields.custom.monitor_id | default: '' }}"
                }{% unless forloop.last %},{% endunless %}
              {% endunless %}
            {% endfor %}
          ]
        </script>
      </div>

      <!-- Format Selection -->
      <div class="format-selection">
        <h4>Format för prislista:</h4>
        <div class="radio-group">
          <label>
            <input type="radio" name="format" value="pdf" checked>
            PDF
          </label>
          <label>
            <input type="radio" name="format" value="csv">
            CSV
          </label>
        </div>
      </div>

      <!-- Submit Button -->
      <div class="form-actions">
        <button type="submit" id="downloadBtn" class="btn btn-primary">
          Skicka prislista via e-post
        </button>
      </div>
    </form>
  </div>

  <!-- Loading State -->
  <div id="loadingState" class="loading-state" style="display: none;">
    <p>Skickar begäran...</p>
    <div class="loading-spinner"></div>
  </div>
</div>

<style>
  .price-list-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }

  .page-header {
    text-align: center;
    margin: 3.5rem 0
  }

  .email-info {
    margin-bottom: 25px;
  }

  .info-box {
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    padding: 15px;
  }

  .info-box strong {
    display: block;
    margin-bottom: 8px;
    font-size: 14px;
  }

  .info-box p {
    margin: 0;
    font-size: 13px;
    line-height: 1.4;
  }

  .selection-section, .format-selection {
    margin-bottom: 25px;
  }

  .radio-group {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-top: 10px;
  }

  .collection-group {
    margin-bottom: 25px;
    background-color: #fafbfc;
    border: 1px solid #e8eaed;
    border-radius: 8px;
    padding: 15px;
  }

  .group-header {
    font-size: 16px;
    font-weight: bold;
    color: #1D349A;
    margin-bottom: 12px;
    padding-bottom: 8px;
    border-bottom: 2px solid #1D349A;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .group-header:hover {
    color: #0f2166;
  }

  .group-toggle {
    font-size: 12px;
    transition: transform 0.2s ease;
  }

  .group-toggle.collapsed {
    transform: rotate(-90deg);
  }

  .group-select-all {
    font-size: 1.2rem;
    font-weight: normal;
    color: #1D349A;
    margin-left: auto;
    text-decoration: underline;
    cursor: pointer;
    padding: 2px 6px;
    border-radius: 3px;
    transition: all 0.2s ease;
  }

  .group-select-all:hover {
    color: #1D349A;
    background-color: #f0f4ff;
    text-decoration: none;
  }

  .checkbox-group {
    display: grid;
    grid-template-columns: 1fr;
    gap: 10px;
    margin-top: 10px;
    padding-left: 20px;
    transition: max-height 0.3s ease, margin-top 0.3s ease, padding-top 0.3s ease;
    overflow: hidden;
    max-height: 1000px; /* Large enough for any reasonable number of collections */
  }

  .checkbox-group.collapsed {
    max-height: 0;
    margin-top: 0;
    padding-top: 0;
  }



  /* Responsive grid layout for larger screens */
  @media (min-width: 768px) {
    .checkbox-group {
      grid-template-columns: repeat(2, 1fr);
      gap: 15px;
    }
  }

  @media (min-width: 1024px) {
    .checkbox-group {
      grid-template-columns: repeat(3, 1fr);
      gap: 15px;
    }
  }

  .checkbox-label {
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    font-size: 14px;
  }

  .btn {
    padding: 12px 24px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
  }

  .btn-primary {
    background-color: #1D349A;
    color: white;
  }

  .btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .loading-state {
    text-align: center;
    padding: 40px;
  }

  .loading-spinner {
    border: 4px solid #f3f3f3;
    border-top: 4px solid #1D349A;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 2s linear infinite;
    margin: 20px auto;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .form-actions {
    text-align: center;
    margin: 3.5rem 0;
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('priceListForm');
  const loadingState = document.getElementById('loadingState');
  const downloadBtn = document.getElementById('downloadBtn');

  // Initialize grouped collections
  initializeGroupedCollections();

  function initializeGroupedCollections() {
    // Collection grouping configuration
    const collectionGroups = {
      'Board & MDF': [
        'Board',
        'Softboard', 
        'Asfaltboard',
        'Hdf',
        'Laminerad Mdf',
        'Board & Mdf övrigt',
        'Lackerad Hdf',
        'Fuktresistent Hdf',
        'Mdf',
        'Fuktresistent Mdf',
        'Brandklassad Mdf',
        'Genomfärgad Mdf',
        'Fanerad Mdf',
        'Melaminbelagd Mdf',
        'Tjock mdf'
      ],
      'Amerikanska trävaror': [
        'Alm',
        'Ask okantad',
        'Ask kantad',
        'Ceder',
        'Körsbär',
        'Ek övrigt',
        'Lind',
        'Lönn',
        'Oregon Pine',
        'Poppel',
        'Rödek',
        'Valnöt',
        'Amerikansk Vitek'
      ],
      'Plywood & OSB': [
        'Konstruktionsplywood',
        'Plywood övrigt',
        'Formplywood',
        'Filmbelagd Björkplywood',
        'Slitskyddsplywood',
        'Laminerad Plywood',
        'Byggplywood',
        'Björkplywood',
        'Furuplywood',
        'Poppelplywood',
        'Fanerad Plywood',
        'Profilerad Plywood',
        'Flexible Plywood',
        'OSB'
      ],
      'Lamellskivor & Limfog': [
        'Fanerlamell',
        'HDF-lamell',
        'MF-lamell',
        'Limfog Hobbyskivor',
        'Limfog Bänkskivor',
        'Limfog Snickeriskivor fingerskarv',
        'Limfog Snickeriskivor Helstav',
        'Limfog Trappämnen',
        'Lamellskivor & Limfog övrigt'
      ],
      'Oorganiska skivor & ytbeläggningar': [
        'Gipsskivor',
        'Fibergips',
        'Kantlist ABS',
        'Kantlist Faner',
        'Faner',
        'Fogat faner',
        'Fibercement',
        'Spåncement',
        'Kompositskivor',
        'Laminat',
        'Kompaktlaminat'
      ],
      'Isolering': [
        'Mineralull',
        'Cellplast',
        'Kantelement',
        'Cellulosaisolering'
      ],
      'Tätning': [
        'Underlagspapp',
        'Ytpapp',
        'Papprodukter övrigt',
        'Plastfolie',
        'Tejp',
        'Tätskiktssystem'
      ],
      'Metallvaror': [
        'Tunnplåtsprofiler'
      ],
      'Kemiskt tekniska varor': [
        'Asfalts- och tätmassor',
        'Kitt och spackel',
        'Oljor och fett',
        'Lim',
        'Fäst och Fogmassa'
      ],
      'Byggelement': [
        'Takprodukter',
        'Markläggning'
      ],
      'Europeiska trävaror': [
        'Al',
        'Björk kantad',
        'Björk okantad',
        'Bok kantad',
        'Bok okantad',
        'Europeisk Ek kantad',
        'Europeisk Ek okantad',
        'Furu osorterad',
        'Furu sidobrädor',
        'Furu scantling',
        'Furu stamvara',
        'Furu Thermobehandlad',
        'Gran sågad'
      ],
      'Afrikanska trävaror': [
        'Teak',
        'Iroko',
        'Mahogny',
        'Merbau',
        'Wenge'
      ],
      'Balk': [
        'Limträbalk',
        'Limträpelare',
        'LVL'
      ],
      'Utemiljö': [
        'Thermo Furu Övriga profiler',
        'Thermo Ask Trall',
        'Komposit Trall',
        'Utemiljö tillbehör',
        'Thermo Furu Trall',
        'Thermo Furu Regel',
        'Thermo Furu Panel',
        'Thermo Gran Panel'
      ],
      'Byggvirke': [
        'Underlagsspont'
      ],
      'List & Panel': [
        'FIBO Panel',
        'Takpanel',
        'List & Panel övrigt',
        'Planhyvlat Trä',
        'Trälist obehandlad',
        'Trälist behandlad',
        'Mdflist',
        'Interiörpanel',
        'Bastupanel',
        'Övrig list'
      ],
      'Golvvaror': [
        'Golvvaror övrigt'
      ],
      'Dörrar & Fönster': [
        'Fönstersmygar',
        'Dörromfattning',
        'Garageportar och tillbehör'
      ],
      'Rumsutrustning': [
        'Trappor',
        'Skåp',
        'Insektsnät'
      ],
      'Kakel & Klinker': [
        'Kakel',
        'Kakel Bas',
        'Kakel vit bas',
        'Klinker Bas',
        'Klinker Utomhus',
        'Klinker',
        'Mosaik'
      ]
    };

    // Get collections data from the hidden script tag
    const collectionsData = JSON.parse(document.getElementById('collectionsData').textContent);
    const groupedCollectionsContainer = document.getElementById('groupedCollections');
    
    // Create a map for quick lookup
    const collectionMap = new Map();
    collectionsData.forEach(collection => {
      collectionMap.set(collection.title, collection);
    });

    // Group collections
    const grouped = {};
    const ungrouped = [];

    // Process defined groups
    Object.keys(collectionGroups).forEach(groupName => {
      grouped[groupName] = [];
      collectionGroups[groupName].forEach(collectionTitle => {
        const collection = collectionMap.get(collectionTitle);
        if (collection) {
          grouped[groupName].push(collection);
          collectionMap.delete(collectionTitle); // Remove from map so it's not added to ungrouped
        }
      });
    });

    // Add remaining collections to ungrouped, but exclude group name collections and irrelevant collections
    const groupNameCollections = Object.keys(collectionGroups);
    const irrelevantCollections = ['Skivor', 'Byggmaterial', 'Trävaror', 'Interiör', 'Kakel & Klinker'];
    const collectionsToExclude = [...groupNameCollections, ...irrelevantCollections];
    
    collectionMap.forEach(collection => {
      // Don't include collections that match our group names or are irrelevant
      if (!collectionsToExclude.includes(collection.title)) {
        ungrouped.push(collection);
      }
    });

    // Render grouped collections
    Object.keys(grouped).forEach(groupName => {
      if (grouped[groupName].length > 0) {
        renderCollectionGroup(groupedCollectionsContainer, groupName, grouped[groupName]);
      }
    });

    // Render ungrouped collections
    if (ungrouped.length > 0) {
      renderUngroupedCollections(groupedCollectionsContainer, ungrouped);
    }
  }

  function renderCollectionGroup(container, groupName, collections) {
    const groupDiv = document.createElement('div');
    groupDiv.className = 'collection-group';
    
    const header = document.createElement('div');
    header.className = 'group-header';
    header.innerHTML = `
      <span class="group-toggle">▼</span>
      <span>${groupName}</span>
      <span class="group-select-all" data-group="${groupName}">Välj alla</span>
    `;
    
    const checkboxGroup = document.createElement('div');
    checkboxGroup.className = 'checkbox-group';
    
    collections.forEach(collection => {
      const label = document.createElement('label');
      label.className = 'checkbox-label';
      label.innerHTML = `
        <input type="checkbox" name="collections[]" value="${collection.id}" data-monitor-id="${collection.monitor_id}" data-group="${groupName}">
        ${collection.title} (${collection.products_count} produkter)
      `;
      checkboxGroup.appendChild(label);
    });
    
    groupDiv.appendChild(header);
    groupDiv.appendChild(checkboxGroup);
    container.appendChild(groupDiv);
    
    // Add click handlers
    header.addEventListener('click', function(e) {
      if (e.target.classList.contains('group-select-all')) {
        e.stopPropagation(); // Prevent group collapse when clicking select all
        toggleGroupSelection(groupName);
      } else {
        toggleGroupCollapse(header, checkboxGroup);
      }
    });

    // Initialize group select all text
    updateGroupSelectAllText(groupName);
  }

  function renderUngroupedCollections(container, collections) {
    if (collections.length === 0) return;
    
    const groupDiv = document.createElement('div');
    groupDiv.className = 'collection-group';
    
    const header = document.createElement('div');
    header.className = 'group-header';
    header.innerHTML = `
      <span class="group-toggle">▼</span>
      <span>Övriga kategorier</span>
      <span class="group-select-all" data-group="ungrouped">Välj alla</span>
    `;
    
    const checkboxGroup = document.createElement('div');
    checkboxGroup.className = 'checkbox-group';
    
    collections.forEach(collection => {
      const label = document.createElement('label');
      label.className = 'checkbox-label';
      label.innerHTML = `
        <input type="checkbox" name="collections[]" value="${collection.id}" data-monitor-id="${collection.monitor_id}" data-group="ungrouped">
        ${collection.title} (${collection.products_count} produkter)
      `;
      checkboxGroup.appendChild(label);
    });
    
    groupDiv.appendChild(header);
    groupDiv.appendChild(checkboxGroup);
    container.appendChild(groupDiv);
    
    // Add click handlers
    header.addEventListener('click', function(e) {
      if (e.target.classList.contains('group-select-all')) {
        e.stopPropagation(); // Prevent group collapse when clicking select all
        toggleGroupSelection('ungrouped');
      } else {
        toggleGroupCollapse(header, checkboxGroup);
      }
    });

    // Initialize group select all text
    updateGroupSelectAllText('ungrouped');
  }

  function toggleGroupCollapse(header, checkboxGroup) {
    const toggle = header.querySelector('.group-toggle');
    const isCollapsed = checkboxGroup.classList.contains('collapsed');
    
    if (isCollapsed) {
      checkboxGroup.classList.remove('collapsed');
      toggle.textContent = '▼';
      checkboxGroup.style.maxHeight = checkboxGroup.scrollHeight + 'px';
    } else {
      checkboxGroup.classList.add('collapsed');
      toggle.textContent = '▶';
      checkboxGroup.style.maxHeight = '0';
    }
  }

  function toggleGroupSelection(groupName) {
    const groupCheckboxes = document.querySelectorAll(`input[data-group="${groupName}"]`);
    const checkedCount = Array.from(groupCheckboxes).filter(cb => cb.checked).length;
    const shouldCheck = checkedCount < groupCheckboxes.length;
    
    groupCheckboxes.forEach(checkbox => {
      checkbox.checked = shouldCheck;
    });
    
    // Update the select all text
    const selectAllSpan = document.querySelector(`[data-group="${groupName}"].group-select-all`);
    selectAllSpan.textContent = shouldCheck ? 'Avmarkera alla' : 'Välj alla';
  }

  // Add event listener for individual checkbox changes to update group select all text
  document.addEventListener('change', function(e) {
    if (e.target.type === 'checkbox' && e.target.name === 'collections[]') {
      const groupName = e.target.dataset.group;
      if (groupName) {
        updateGroupSelectAllText(groupName);
      }
    }
  });

  function updateGroupSelectAllText(groupName) {
    const groupCheckboxes = document.querySelectorAll(`input[data-group="${groupName}"]`);
    const checkedCount = Array.from(groupCheckboxes).filter(cb => cb.checked).length;
    const selectAllSpan = document.querySelector(`[data-group="${groupName}"].group-select-all`);
    
    if (checkedCount === 0) {
      selectAllSpan.textContent = 'Välj alla';
    } else if (checkedCount === groupCheckboxes.length) {
      selectAllSpan.textContent = 'Avmarkera alla';
    } else {
      selectAllSpan.textContent = `Välj alla (${checkedCount}/${groupCheckboxes.length})`;
    }
  }

  // Form submission
  form.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    console.log('Form submitted');
    
    const formData = new FormData(form);
    const format = formData.get('format');
    
    console.log('Format:', format);
    
    // Get selected collections with Monitor IDs
    const selectedCollectionIds = Array.from(formData.getAll('collections[]'));
    
    if (selectedCollectionIds.length === 0) {
      alert('Välj minst en kategori för att få prislistan skickad via e-post.');
      return;
    }
    
    // Build collections array with Monitor IDs from data attributes
    const collections = selectedCollectionIds.map(collectionId => {
      const collectionElement = document.querySelector(`input[value="${collectionId}"]`);
      const monitorId = collectionElement ? collectionElement.dataset.monitorId || '' : '';
      
      console.log(`Collection ${collectionId} has Monitor ID: ${monitorId || 'NONE'}`);
      
      return {
        id: collectionId,
        monitor_id: monitorId
      };
    });
    
    let payload = {
      customer_id: {{ customer.id }},
      customer_email: "{{ customer.email }}",
      customer_company: "{{ customer.metafields.custom.company | default: '' }}",
      monitor_id: "{{ customer.metafields.custom.monitor_id | default: '' }}",
      format: format,
      selection_method: "collections",
      shop: "{{ shop.domain }}",
      collections: collections
    };

    console.log('Final payload:', payload);

    // Show loading state
    form.style.display = 'none';
    loadingState.style.display = 'block';

    try {
      const response = await fetch('https://monitor-api-connect-production.up.railway.app/api/pricelist', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      });

      if (response.ok) {
        const result = await response.json();
        
        if (result.success) {
          alert(`Prislistan kommer att skickas till ${payload.customer_email} inom några minuter.`);
        } else {
          throw new Error(result.message || 'Okänt fel vid begäran');
        }
      } else {
        console.error('API request failed with status:', response.status);
        let errorMessage = 'Failed to submit request';
        try {
          const errorData = await response.json();
          errorMessage = errorData.error || errorMessage;
          console.error('Error data:', errorData);
        } catch (parseError) {
          console.error('Could not parse error response:', parseError);
        }
        throw new Error(errorMessage);
      }
    } catch (error) {
      console.error('Request error:', error);
      alert(`Error submitting request: ${error.message}`);
    } finally {
      // Hide loading state
      form.style.display = 'block';
      loadingState.style.display = 'none';
    }
  });
});
</script>

{% endunless %}
