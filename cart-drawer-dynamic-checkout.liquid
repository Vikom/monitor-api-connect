<!-- Add this to your cart-drawer.liquid file -->
<!-- Dynamic Pricing Checkout for Cart Drawer -->
{% if customer %}
<script>
// Ensure customer object is available
if (!window.customer) {
  window.customer = {{ customer | json }};
}

// Enhanced checkout for dynamic pricing in cart drawer
document.addEventListener('DOMContentLoaded', () => {
  // Target cart drawer checkout buttons specifically
  const setupDynamicCheckout = () => {
    const checkoutBtns = document.querySelectorAll(
      '#CartDrawer button[name="checkout"], ' +
      '#CartDrawer .btn--primary[type="submit"], ' +
      '.cart-drawer button[name="checkout"], ' +
      '.cart-drawer .btn--primary[type="submit"], ' +
      '.drawer__footer button[name="checkout"]'
    );
    
    checkoutBtns.forEach(btn => {
      // Remove existing listeners to avoid duplicates
      btn.removeEventListener('click', handleDynamicCheckout);
      btn.addEventListener('click', handleDynamicCheckout);
    });
  };
  
  const handleDynamicCheckout = async (e) => {
    if (!window.customer?.id) {
      console.log('No logged-in customer, using normal checkout');
      return; // Let normal checkout proceed
    }
    
    e.preventDefault();
    e.stopPropagation();
    
    const btn = e.target;
    const originalText = btn.textContent;
    
    try {
      // Show loading state
      btn.textContent = 'Tillämpar din prissättning...'; // "Applying your pricing..." in Swedish
      btn.disabled = true;
      
      // Get current cart
      const cartResponse = await fetch('/cart.js');
      const cart = await cartResponse.json();
      
      if (cart.items.length === 0) {
        btn.textContent = originalText;
        btn.disabled = false;
        return;
      }
      
      console.log('Creating draft order for cart items:', cart.items.length);
      
      // Create items array for draft order
      const items = cart.items.map(item => ({
        variantId: `gid://shopify/ProductVariant/${item.variant_id}`,
        quantity: item.quantity
      }));
      
      // Create draft order with dynamic pricing
      const response = await fetch('/api/draft-order', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          customerId: `gid://shopify/Customer/${window.customer.id}`,
          items: items
        })
      });
      
      const result = await response.json();
      
      if (response.ok && result.invoiceUrl) {
        console.log('Draft order created successfully, redirecting...');
        
        // Show success message briefly
        btn.textContent = 'Omdirigerar till kassan...'; // "Redirecting to checkout..."
        
        // Clear the cart and redirect to draft order
        await fetch('/cart/clear.js', { method: 'POST' });
        
        // Small delay for better UX
        setTimeout(() => {
          window.location.href = result.invoiceUrl;
        }, 500);
        
      } else {
        throw new Error(result.error || 'Failed to create draft order');
      }
      
    } catch (error) {
      console.error('Dynamic pricing checkout error:', error);
      
      // Show error briefly then restore
      btn.textContent = 'Fel uppstod, försöker igen...'; // "Error occurred, trying again..."
      
      setTimeout(() => {
        btn.textContent = originalText;
        btn.disabled = false;
        
        // Fallback to normal checkout after error
        const form = btn.closest('form');
        if (form) {
          form.submit();
        } else {
          window.location.href = '/checkout';
        }
      }, 1500);
    }
  };
  
  // Set up initially
  setupDynamicCheckout();
  
  // Re-setup when cart drawer is updated (for dynamic content)
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'childList' && 
          (mutation.target.matches('.cart-drawer') || 
           mutation.target.closest('.cart-drawer'))) {
        setupDynamicCheckout();
      }
    });
  });
  
  // Observe cart drawer for changes
  const cartDrawer = document.querySelector('.cart-drawer, #CartDrawer');
  if (cartDrawer) {
    observer.observe(cartDrawer, {
      childList: true,
      subtree: true
    });
  }
});
</script>
{% endif %}
